@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/surrender"
@rendermode InteractiveAuto

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IModalService ModalService
@inject ILogger<ArchivedTransactions> Logger

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="/static/site.js"></script>

<h1>Surrender Details</h1>

<div class="container mt-4">
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Select ID:</label>
                    <RadzenDropDownDataGrid @bind-Value="SelectedPar"
                                            Data="ParIDList"
                                            TextProperty="List"
                                            ValueProperty="ParID"
                                            AllowClear="true"
                                            AllowFiltering="true"
                                            Placeholder="Select an ID"
                                            Class="w-100"
                                            Change="@OnParSelectionChanged" />
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(SelectedPar))
    {
        <div class="row mb-3">
            <div class="col">
                <label class="form-label fw-bold">Quantity:</label>
                <p>@(SelectedItemPARData?.ParQty.ToString() ?? "N/A")</p>
            </div>
            <div class="col">
                <label class="form-label fw-bold">Unit (Item Code):</label>
                <p>@(SelectedItemPARData?.ItemCode.ToString() ?? "N/A")</p>
            </div>
            <div class="col">
                <label class="form-label fw-bold">Description:</label>
                <p>@(_ItemDescription ?? "N/A")</p>
            </div>
            <div class="col">
                <label class="form-label fw-bold">Date Acquired:</label>
                <p>@(SelectedItemPARData?.ParDate ?? "N/A")</p>
            </div>
            <div class="col">
                <label class="form-label fw-bold">Property No.:</label>
                <p>@(SelectedItemPARData?.ItemCode.ToString() ?? "N/A")</p>
            </div>
            <div class="col">
                <label class="form-label fw-bold">Unit Value:</label>
                <p>₱@(SelectedItemPARData?.value.ToString("N2") ?? "N/A")</p>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col">
                <label class="form-label fw-bold">Surrendered By:</label>
                <p>@(SelectedItemPARData?.ParName ?? "N/A")</p>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <h5>1. Classification</h5>
                <div><RadzenCheckBox @bind-Value="IsClassification1" /> Office Equipment</div>
                <div><RadzenCheckBox @bind-Value="IsClassification2" /> Furniture & Fixtures</div>
                <div><RadzenCheckBox @bind-Value="IsClassification3" /> IT Equipment</div>
                <div><RadzenCheckBox @bind-Value="IsClassification4" /> Other Machinery & Equipment</div>
                <div><RadzenCheckBox @bind-Value="IsClassification5" /> Communication Equipment</div>
            </div>
            <div class="col-md-6">
                <h5>2. Distribution of Copies</h5>
                <div><RadzenCheckBox @bind-Value="CopiesEndUser" /> End User</div>
                <div><RadzenCheckBox @bind-Value="CopiesGSO" /> GSO</div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label fw-bold">Condition:</label>
                <RadzenDropDown @bind-Value="Condition" Data="conditions" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <RadzenButton Text="Submit" Click="SaveToExcel" ButtonStyle="ButtonStyle.Primary" />
            </div>
        </div>
    }
</div>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    private CancellationTokenSource cts = new CancellationTokenSource();
    private List<ParDisplayInfo>? ParIDList;
    private string? SelectedPar;
    private ParDisplayInfo? SelectedParInfo;
    private string? _ItemDescription;

    private readonly List<string> conditions = new List<string> { "Servicable", "Nonservicable" };
    private List<string>? ItemList;

    private Items? SelectedItemData;
    private PAR? SelectedItemPARData;
    private double Price;

    private string? SelectedItem;
    private string? Reason;
    private string? Condition;
    private string? ConditionSpecification;
    private string? Quantity;
    private string? Classification;

    private bool IsClassification1;
    private bool IsClassification2;
    private bool IsClassification3;
    private bool IsClassification4;
    private bool IsClassification5;

    private bool CopiesEndUser;
    private bool CopiesGSO;

    private string? NonservCode;
    private string? disposalName;
    private string? Description;
    private DateOnly disposalDate;

    private string? SurName;
    private string? PrpName;
    private string? DprName;
    private string? archiveDate;
    private double Value;
    private string? ItemCond;
    private int SurQTY;
    private string? Clasification;
    private string? Copies;

    public class ParDisplayInfo
    {
        public string ParID { get; set; }
        public string ItemName { get; set; }
        public string ParName { get; set; }
        public string ItemDetails { get; set; }
        public string List => $"{ParID} - {ItemName} ({ParName})";
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing Surrender component");
        var paridresponse = await HttpClient.GetAsync("https://localhost:7041/api/PAR/byParID");
        if (paridresponse.IsSuccessStatusCode)
        {
            var parIds = await paridresponse.Content.ReadFromJsonAsync<List<string>>();
            if (parIds != null)
            {
                ParIDList = new List<ParDisplayInfo>();
                foreach (var parId in parIds)
                {
                    var parResponse = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{parId}");
                    if (parResponse.IsSuccessStatusCode)
                    {
                        var parData = await parResponse.Content.ReadFromJsonAsync<PAR>();
                        if (parData != null)
                        {
                            var descResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{parData.ItemName}");
                            string? itemDetails = descResponse.IsSuccessStatusCode ? await descResponse.Content.ReadAsStringAsync() : null;

                            ParIDList.Add(new ParDisplayInfo
                                {
                                    ParID = parId,
                                    ItemName = parData.ItemName,
                                    ParName = parData.ParName,
                                    ItemDetails = itemDetails ?? string.Empty
                                });
                        }
                    }
                }
                Logger.LogInformation($"Loaded {ParIDList.Count} PAR IDs");
            }
        }
        else
        {
            ParIDList = new List<ParDisplayInfo>();
            Logger.LogWarning("Failed to fetch PAR IDs: {StatusCode}", paridresponse.StatusCode);
        }

        if (!string.IsNullOrEmpty(SelectedPar))
        {
            SelectedParInfo = ParIDList?.FirstOrDefault(p => p.ParID == SelectedPar);
            await LoadParData();
        }
    }

    private async Task OnParSelectionChanged(object value)
    {
        SelectedPar = value as string;
        SelectedParInfo = ParIDList?.FirstOrDefault(p => p.ParID == SelectedPar);

        if (!string.IsNullOrEmpty(SelectedPar))
        {
            await LoadParData();
        }
        else
        {
            SelectedParInfo = null;
            SelectedItemPARData = null;
            SelectedItemData = null;
            _ItemDescription = null;
            Price = 0;
            Condition = null;
            IsClassification1 = false;
            IsClassification2 = false;
            IsClassification3 = false;
            IsClassification4 = false;
            IsClassification5 = false;
            CopiesEndUser = false;
            CopiesGSO = false;
            Logger.LogInformation("Cleared PAR selection");
        }
        StateHasChanged();
    }

    private async Task LoadParData()
    {
        if (string.IsNullOrEmpty(SelectedPar))
        {
            Logger.LogWarning("SelectedPar is null or empty. Cannot fetch PAR data.");
            return;
        }

        Logger.LogInformation("Loading PAR data for {ParID}", SelectedPar);
        var parResponse = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
        if (parResponse.IsSuccessStatusCode)
        {
            SelectedItemPARData = await parResponse.Content.ReadFromJsonAsync<PAR>();
            if (SelectedItemPARData != null)
            {
                if (!string.IsNullOrEmpty(SelectedItemPARData.ItemName))
                {
                    var descResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{SelectedItemPARData.ItemName}");
                    if (descResponse.IsSuccessStatusCode)
                    {
                        var itemDetails = await descResponse.Content.ReadAsStringAsync();
                        _ItemDescription = $"{SelectedItemPARData.ItemName} - {itemDetails}";
                    }
                    else
                    {
                        _ItemDescription = SelectedItemPARData.ItemName;
                    }

                    var itemResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemByName/{SelectedItemPARData.ItemName}");
                    if (itemResponse.IsSuccessStatusCode)
                    {
                        SelectedItemData = await itemResponse.Content.ReadFromJsonAsync<Items>();
                        var priceResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItemPARData.ItemName}");
                        if (priceResponse.IsSuccessStatusCode)
                        {
                            Price = await priceResponse.Content.ReadFromJsonAsync<double>();
                        }
                        else
                        {
                            Logger.LogWarning("Failed to fetch Price for {ItemName}: {StatusCode}", SelectedItemPARData.ItemName, priceResponse.StatusCode);
                        }
                    }
                    else
                    {
                        Logger.LogWarning("Failed to fetch Item data for {ItemName}: {StatusCode}", SelectedItemPARData.ItemName, itemResponse.StatusCode);
                    }
                }
            }
            else
            {
                Logger.LogWarning("SelectedItemPARData is null after deserialization for {ParID}", SelectedPar);
            }
        }
        else
        {
            Logger.LogWarning("Failed to fetch PAR data for {ParID}: {StatusCode}", SelectedPar, parResponse.StatusCode);
        }
        StateHasChanged();
    }

    private async Task SaveToExcel()
    {
        if (SelectedItemPARData == null)
        {
            Logger.LogWarning("No PAR data available to generate surrender form.");
            return;
        }

        if (string.IsNullOrEmpty(Condition))
        {
            Logger.LogWarning("Condition is required to generate surrender form.");
            return;
        }

        var classifications = new List<string>();
        if (IsClassification1) classifications.Add("Office Equipment");
        if (IsClassification2) classifications.Add("Furniture & Fixtures");
        if (IsClassification3) classifications.Add("IT Equipment");
        if (IsClassification4) classifications.Add("Other Machinery & Equipment");
        if (IsClassification5) classifications.Add("Communication Equipment");
        Classification = string.Join(", ", classifications);

        var copiesList = new List<string>();
        if (CopiesEndUser) copiesList.Add("End User");
        if (CopiesGSO) copiesList.Add("GSO");
        var copies = string.Join(", ", copiesList);

        if (Condition == "Nonservicable")
        {
            var itemDisposal = new ItemDisposal
            {
                NonServCode = SelectedItemPARData.ItemCode.ToString(),
                disposalName = SelectedItemPARData.ItemName,
                Description = SelectedItemPARData.ItemDesc,
                disposalDate = DateOnly.FromDateTime(DateTime.Now)
            };

            var addResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ItemDisposal", itemDisposal);
            if (!addResponse.IsSuccessStatusCode)
            {
                Logger.LogWarning("Failed to insert into ItemDisposal: {StatusCode}", addResponse.StatusCode);
                return;
            }

            if (!string.IsNullOrEmpty(_ItemDescription))
            {
                var deleteItemResponse = await HttpClient.DeleteAsync($"https://localhost:7041/api/Item/byDescription/{Uri.EscapeDataString(_ItemDescription)}");
                if (!deleteItemResponse.IsSuccessStatusCode)
                {
                    Logger.LogWarning("Failed to delete item from masterlist: {StatusCode}", deleteItemResponse.StatusCode);
                }
            }

            var deleteParResponse = await HttpClient.DeleteAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
            if (!deleteParResponse.IsSuccessStatusCode)
            {
                Logger.LogWarning("Failed to delete PAR entry: {StatusCode}", deleteParResponse.StatusCode);
                return;
            }
        }

        var surrenderData = new SurrenderData
            {
                Quantity = SelectedItemPARData.ParQty.ToString(),
                ItemCode = SelectedItemPARData.ItemCode,
                ItemName = _ItemDescription ?? string.Empty,
                ParDate = SelectedItemPARData.ParDate ?? string.Empty,
                ParID = SelectedItemPARData.ParID,
                Value = SelectedItemPARData.value,
                Price = Price,
                ParName = SelectedItemPARData.ParName ?? string.Empty,
                Condition = Condition ?? string.Empty,
                IsClassification1 = IsClassification1,
                IsClassification2 = IsClassification2,
                IsClassification3 = IsClassification3,
                IsClassification4 = IsClassification4,
                IsClassification5 = IsClassification5,
                CopiesEndUser = CopiesEndUser,
                CopiesGSO = CopiesGSO,
                Copies = copies,
                Clasification = Classification ?? string.Empty,
                SurName = SelectedItemPARData.ParName ?? string.Empty,
                PrpName = _ItemDescription ?? string.Empty,
                Description = _ItemDescription ?? string.Empty,
                archiveDate = DateOnly.FromDateTime(DateTime.Now).ToString(),
                ItemCond = Condition ?? string.Empty,
                SurQTY = SelectedItemPARData.ParQty
            };

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-surrender", surrenderData);
        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var pdfBase64 = Convert.ToBase64String(fileBytes);

            var parameters = new ModalParameters();
            parameters.Add("PdfBase64", pdfBase64);
            var options = new ModalOptions
                {
                    HideCloseButton = true,
                    DisableBackgroundCancel = true
                };
            ModalService.Show<SurPreview>("Preview", parameters, options);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Logger.LogError("Failed to generate PDF file: {ErrorContent}", errorContent);
            return;
        }

        var archiving = new SurrenderData
            {
                SurName = SelectedItemPARData.ParName ?? string.Empty,
                PrpName = _ItemDescription ?? string.Empty,
                Description = _ItemDescription ?? string.Empty,
                archiveDate = DateOnly.FromDateTime(DateTime.Now).ToString(),
                Value = SelectedItemPARData.value,
                ItemCond = Condition ?? string.Empty,
                SurQTY = SelectedItemPARData.ParQty,
                Clasification = Classification ?? string.Empty,
                Copies = copies
            };

        var archiveResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ArchivedTransactions", archiving);
        if (!archiveResponse.IsSuccessStatusCode)
        {
            Logger.LogWarning("Failed to archive transaction: {StatusCode}, Reason: {ReasonPhrase}", archiveResponse.StatusCode, archiveResponse.ReasonPhrase);
        }
        else
        {
            Logger.LogInformation("Archive inserted successfully.");
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    public class PAR
    {
        public string ParID { get; set; }
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
        public string ItemDesc { get; set; }
        public string ParName { get; set; }
        public string ParDate { get; set; }
        public double value { get; set; }
        public int ParQty { get; set; }
        public string DprHeadName { get; set; }
    }

    public class Items
    {
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
        public string ItemDeets { get; set; }
    }

    public class ItemDisposal
    {
        public string NonServCode { get; set; }
        public string disposalName { get; set; }
        public string Description { get; set; }
        public DateOnly disposalDate { get; set; }
    }

    public class SurrenderData
    {
        public string Quantity { get; set; }
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
        public string ParDate { get; set; }
        public string ParID { get; set; }
        public double Value { get; set; }
        public double Price { get; set; }
        public string ParName { get; set; }
        public string Condition { get; set; }
        public bool IsClassification1 { get; set; }
        public bool IsClassification2 { get; set; }
        public bool IsClassification3 { get; set; }
        public bool IsClassification4 { get; set; }
        public bool IsClassification5 { get; set; }
        public bool CopiesEndUser { get; set; }
        public bool CopiesGSO { get; set; }
        public string SurName { get; set; }
        public string PrpName { get; set; }
        public string Description { get; set; }
        public string archiveDate { get; set; }
        public string ItemCond { get; set; }
        public int SurQTY { get; set; }
        public string Clasification { get; set; }
        public string Copies { get; set; }
    }
}