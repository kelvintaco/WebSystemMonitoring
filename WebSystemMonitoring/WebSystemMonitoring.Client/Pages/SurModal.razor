@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@rendermode InteractiveAuto

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="https://localhost:7041/static/site.js"></script>

<h1>Surrender Details</h1>

<div>
    <label for="condition">What is the condition?</label>
    <RadzenDropDown @bind-Value="Condition" Data="conditions"/>
</div>

<div>
    <h4>Classification</h4>
    <RadzenCheckBox @bind-Value="IsClassification1" Text="Office Equipment" />
    <RadzenCheckBox @bind-Value="IsClassification2" Text="Furniture & Fixtures" />
    <RadzenCheckBox @bind-Value="IsClassification3" Text="IT Equipment" />
    <RadzenCheckBox @bind-Value="IsClassification4" Text="Other Machinery & Equipment" />
    <RadzenCheckBox @bind-Value="IsClassification5" Text="Communication Equipment" />
</div>

<div>
    <h4>Distribution of Copies</h4>
    <RadzenCheckBox @bind-Value="CopiesEndUser" Text="End User" />
    <RadzenCheckBox @bind-Value="CopiesGSO" Text="GSO" />
</div>

<div>
    <label for="reason">Reason</label>
    <InputText @bind-Value="Reason" />
</div>

<div>
    <label for="conditionSpecification">Specify the condition</label>
    <InputText @bind-Value="ConditionSpecification" />
</div>

<div>
    <label for="quantity">Quantity</label>
    <InputText @bind-Value="Quantity" />
</div>

<button type="submit" class="btn btn-primary mt-2" @onclick="SaveToExcel">Submit</button>

@code {
    [Parameter] public string SelectedPar { get; set; }

    private List<string>? conditions = new List<string> { "Servicable", "Nonservicable" };
    private List<string>? ItemList;

    private Items SelectedItemData;
    private PAR SelectedItemPARData;
    private double Price;

    private string SelectedItem { get; set; }
    private string? Reason;
    private string? Condition;
    private string? ConditionSpecification;
    private string? Quantity;
    private string? Classification;

    private bool IsClassification1;
    private bool IsClassification2;
    private bool IsClassification3;
    private bool IsClassification4;
    private bool IsClassification5;

    private bool CopiesEndUser;
    private bool CopiesGSO;

    private string? NonservCode;
    private string? disposalName;
    private string? Description;
    private DateOnly disposalDate;

    private string? SurName;
    private string? PrpName;
    private string? DprName;
    private string? archiveDate;
    private double Value;
    private string? ItemCond;
    private int SurQTY;
	private string? Clasification;
	private string? Copies;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(SelectedPar))
        {
            var parResponse = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
            if (parResponse.IsSuccessStatusCode)
            {
                SelectedItemPARData = await parResponse.Content.ReadFromJsonAsync<PAR>();

                if (SelectedItemPARData != null)
                {
                    var itemResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemByName/{SelectedItemPARData.ItemName}");
                    if (itemResponse.IsSuccessStatusCode)
                    {
                        SelectedItemData = await itemResponse.Content.ReadFromJsonAsync<Items>();

                        var priceResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItemPARData.ItemName}");
                        if (priceResponse.IsSuccessStatusCode)
                        {
                            Price = await priceResponse.Content.ReadFromJsonAsync<double>();
                        }
                    }
                }
            }
        }
    }

    private async Task SaveToExcel()
    {
        var classifications = new List<string>();
        if (IsClassification1) classifications.Add("Office Equipment");
        if (IsClassification2) classifications.Add("Furniture & Fixtures");
        if (IsClassification3) classifications.Add("IT Equipment");
        if (IsClassification4) classifications.Add("Other Machinery & Equipment");
        if (IsClassification5) classifications.Add("Communication Equipment");

        Classification = string.Join(", ", classifications);
        if (Condition == "Nonservicable" && SelectedItemPARData != null)
        {
            // Insert into ItemDisposal table
            var itemDisposal = new ItemDisposal
            {
                NonServCode = SelectedItemPARData.ItemCode.ToString(),
                disposalName = SelectedItemPARData.ItemName,
                Description = Reason,
                disposalDate = DateOnly.FromDateTime(DateTime.Now)
            };

            var addResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ItemDisposal", itemDisposal);
            if (addResponse.IsSuccessStatusCode)
            {
                var deleteResponse = await HttpClient.DeleteAsync($"https://localhost:7041/api/Item/byItemName/{SelectedItemPARData.ItemName}");
                if (!deleteResponse.IsSuccessStatusCode)
                {
                    Console.WriteLine("Failed to delete item.");
                }
            }
            else
            {
                Console.WriteLine("Failed to insert into ItemDisposal.");
                return;
            }
        }

        // Prepare data for the server
        var surrenderData = new SurrenderData
        {
            Quantity = Quantity,
            ItemCode = SelectedItemPARData.ItemCode,
            ItemName = SelectedItemPARData.ItemName,
            ParDate = SelectedItemPARData.ParDate,
            ParID = SelectedItemPARData.ParID,
            Value = SelectedItemPARData.value,
            Price = Price,
            ParName = SelectedItemPARData.ParName,
            Condition = Condition,
            IsClassification1 = IsClassification1,
            IsClassification2 = IsClassification2,
            IsClassification3 = IsClassification3,
            IsClassification4 = IsClassification4,
            IsClassification5 = IsClassification5,
            CopiesEndUser = CopiesEndUser,
            CopiesGSO = CopiesGSO
        };

        // Call the server API to generate the Excel file
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-surrender", surrenderData);
        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            //await JSRuntime.InvokeVoidAsync("downloadFile", "surrenderData.xlsx", Convert.ToBase64String(fileBytes), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            await JSRuntime.InvokeVoidAsync("downloadFile", "SURData.pdf", Convert.ToBase64String(fileBytes), "application/pdf");
            Console.WriteLine("File generated and download triggered successfully.");
        }
        else
        {
            Console.WriteLine($"Failed to generate Excel file: {await response.Content.ReadAsStringAsync()}");
        }
        var archiving = new SurrenderData
            {
                SurName = SelectedItemPARData.ParName,
                PrpName = SelectedItemPARData.ItemName,
                DprName = SelectedItemPARData.DprHeadName,
                archiveDate = DateOnly.FromDateTime(DateTime.Now).ToString(),
                Value = SelectedItemPARData.value,
                ItemCond = Condition,
                SurQTY = SelectedItemPARData.ParQty,
                Clasification = Classification,
                Copies = CopiesEndUser && CopiesGSO ? "End User, GSO" :
                         CopiesEndUser ? "End User" :
                         CopiesGSO ? "GSO" : ""
            };

        var archiveResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ArchivedTransactions", archiving);
        if (!archiveResponse.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to fetch Item data. Status: {archiveResponse.StatusCode}, Reason: {archiveResponse.ReasonPhrase}");
        }
        else
        {
			Console.WriteLine("Archive inserted successfully.");
        }

		var deleteParResponse = await HttpClient.DeleteAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
		if (!deleteParResponse.IsSuccessStatusCode)
		{
		    Console.WriteLine("Failed to delete PAR.");
		}
        else
		{
		    Console.WriteLine("PAR deleted successfully.");
		}
    }

    // Data transfer object to match the server
    private class SurrenderData
    {
        public string Quantity { get; set; }
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
        public string ParDate { get; set; }
        public string ParID { get; set; }
        public double Value { get; set; }
        public double Price { get; set; }
        public string ParName { get; set; }
        public string Condition { get; set; }
        public bool IsClassification1 { get; set; }
        public bool IsClassification2 { get; set; }
        public bool IsClassification3 { get; set; }
        public bool IsClassification4 { get; set; }
        public bool IsClassification5 { get; set; }
        public bool CopiesEndUser { get; set; }
        public bool CopiesGSO { get; set; }
		public string? SurName { get; set; }
        public string? DprName { get; set; }
		public string? PrpName { get; set; }
		public string? archiveDate { get; set; }
        public string? ItemCond { get; set; }
		public int SurQTY { get; set; }
        public string Clasification { get; set; }
		public string Copies { get; set; }
    }
}