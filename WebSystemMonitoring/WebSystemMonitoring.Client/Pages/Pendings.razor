@using Radzen.Blazor
@using MatBlazor
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Globalization
@using Newtonsoft.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using OfficeOpenXml
@using System.IO
@page "/pendings"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService
@inject NavigationManager NavigationManager

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<style>
    /* Custom styles for RadzenDataGrid */
    .custom-radzen-grid {
        border-radius: 0.5rem;
        overflow: hidden;
        border: 1px solid #e5e7eb;
        width: 100%;
        min-width: 1200px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .custom-radzen-grid ::deep .rz-datatable-header {
        background-color: #1f2937;
        color: white;
        font-weight: bold;
        padding: 1rem;
        border: none;
    }

    .custom-radzen-grid ::deep .rz-grid-table {
        width: 100%;
        table-layout: fixed;
    }

    .custom-radzen-grid ::deep .rz-datatable-scrollable-header {
        background-color: #1f2937;
    }

    .custom-radzen-grid ::deep .rz-datatable-scrollable-header-box {
        margin-right: 0 !important;
    }

    .custom-radzen-grid ::deep .rz-column-title {
        color: white;
        font-weight: 600;
        white-space: nowrap;
        overflow-x: hidden;
        text-overflow: ellipsis;
        font-size: 0.85rem;
    }

    .custom-radzen-grid ::deep .rz-grid-table th {
        background-color: #1f2937;
        border-color: #374151;
        padding: 0.5rem;
    }

    .custom-radzen-grid ::deep .rz-grid-table tr {
        background-color: white;
        transition: background-color 0.2s;
    }

    .custom-radzen-grid ::deep .rz-grid-table tr:hover {
        background-color: #f9fafb;
    }

    .custom-radzen-grid ::deep .rz-grid-table td {
        padding: 0.5rem;
        border-color: #e5e7eb;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 0.875rem;
    }

    .custom-radzen-grid ::deep .rz-paginator {
        background-color: #f9fafb;
        border-top: 1px solid #e5e7eb;
        padding: 0.5rem;
        display: flex;
        justify-content: center;
    }

    .custom-radzen-grid ::deep .rz-paginator-element {
        color: #374151;
        font-weight: 500;
        background-color: transparent;
        margin: 0 0.25rem;
    }

    .custom-radzen-grid ::deep .rz-paginator-element:hover:not(.rz-state-disabled) {
        background-color: #e5e7eb;
        color: #111827;
    }

    .custom-radzen-grid ::deep .rz-paginator-page.rz-state-active {
        background-color: #1f2937;
        color: white;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .approve-btn {
        background-color: #10B981;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .approve-btn:hover {
        background-color: #059669;
    }

    .disapprove-btn {
        background-color: #EF4444;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .disapprove-btn:hover {
        background-color: #DC2626;
    }

    body {
        overflow-x: hidden;
    }

    /* Custom styles for RadzenTabs */
    ::deep .rz-tabview {
        margin-top: 2rem;
    }

    ::deep .rz-tabview-nav {
        background-color: #f3f4f6;
        border-radius: 0.5rem 0.5rem 0 0;
        padding: 0.5rem 0.5rem 0;
    }

    ::deep .rz-tabview-nav-item {
        padding: 0.75rem 1.5rem;
        margin-right: 0.25rem;
        border-radius: 0.375rem 0.375rem 0 0;
        background-color: #e5e7eb;
        color: #4b5563;
        font-weight: 500;
        transition: all 0.2s;
    }

    ::deep .rz-tabview-nav-item:hover {
        background-color: #d1d5db;
        color: #1f2937;
    }

    ::deep .rz-tabview-selected {
        background-color: #1f2937 !important;
        color: white !important;
    }

    ::deep .rz-tabview-panels {
        background-color: white;
        border: 1px solid #e5e7eb;
        border-top: none;
        border-radius: 0 0 0.5rem 0.5rem;
        padding: 1.5rem;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .page-title {
        font-size: 1.875rem;
        font-weight: 800;
        color: #111827;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .page-title i {
        color: #2563eb;
    }

    .search-container {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .search-input {
        flex: 1;
        padding: 0.5rem 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: border-color 0.2s;
    }

    .search-input:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
    }

    .search-input::placeholder {
        color: #9ca3af;
    }

    .search-button {
        background-color: #2563eb;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .search-button:hover {
        background-color: #1d4ed8;
    }

    .search-button:active {
        background-color: #1e40af;
    }

    .clear-button {
        background-color: #e5e7eb;
        color: #4b5563;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .clear-button:hover {
        background-color: #d1d5db;
        color: #1f2937;
    }

    .clear-button:active {
        background-color: #9ca3af;
    }
</style>

<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-exclamation-circle"></i>
        Pendings
    </h1>
</div>

<RadzenTabs RenderMode="TabRenderMode.Client" class="w-full">
    <Tabs>
        <RadzenTabsItem Text="PAR (Property Acknowledgement Receipt)">
            <div class="w-full overflow-hidden">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search PAR..." @bind="parSearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterPAR">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearPARSearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid @ref="PendingPAR"
                                Data="@FilteredPARs"
                                TItem="PendingPAR"
                                AllowSorting="true"
                                AllowPaging="true"
                                AllowFiltering="true"
                                PageSize="10"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterMode="FilterMode.Advanced"
                                class="custom-radzen-grid"
                                Responsive="true"
                                Style="width: 100%;">
                    <Columns>
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ParID" Title="PAR ID" Width="80px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ItemCode" Title="Serial" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ItemName" Title="Item Name" Width="130px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ItemDesc" Title="Description" Width="200px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ParName" Title="Custodian" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="refNo" Title="Ref No." Width="100px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ParDate" Title="Date" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Property="ParQty" Title="Quantity" Width="80px" />
                        <RadzenDataGridColumn TItem="PendingPAR" Context="data" Title="Actions" TextAlign="TextAlign.Center" Width="180px">
                            <Template Context="data">
                                <div class="action-buttons">
                                    <button class="approve-btn" @onclick="() => ApprovePAR(data)">
                                        <i class="fas fa-check"></i> Approve
                                    </button>
                                    <button class="disapprove-btn" @onclick="() => DisapprovePAR(data)">
                                        <i class="fas fa-times"></i> Disapprove
                                    </button>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text="ICS (Inventory Custodian Slip)">
            <div class="w-full overflow-hidden">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search ICS..." @bind="icsSearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterICS">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearICSSearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid class="icsmodal" @ref="_PendingICS" Data="@FilteredICS" TItem="PendingICS" AllowSorting="true" AllowPaging="true" AllowFiltering="true" PageSize="10">
                    <Columns>
                        <RadzenDataGridColumn TItem="PendingICS" Property="ItemCode" Title="Serial" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingICS" Property="Description" Title="Description" Width="200px" />
                        <RadzenDataGridColumn TItem="PendingICS" Property="CSTCode" Title="Cst Code" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingICS" Property="ICSName" Title="Name" Width="150px" />
                        <RadzenDataGridColumn TItem="PendingICS" Property="ICSPrice" Title="Price" Width="100px" FormatString="₱{0:N2}" />
                        <RadzenDataGridColumn TItem="PendingICS" Property="ICSSDate" Title="IcsDate" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingICS" Context="data" Title="Actions" TextAlign="TextAlign.Center" Width="180px">
                            <Template Context="data">
                                <div class="action-buttons">
                                    <button class="approve-btn" @onclick="() => ApproveICS(data)">
                                        <i class="fas fa-check"></i> Approve
                                    </button>
                                    <button class="disapprove-btn" @onclick="() => DisapproveICS(data)">
                                        <i class="fas fa-times"></i> Disapprove
                                    </button>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Surrender">
            <div class="w-full overflow-hidden">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search Surrender..." @bind="surSearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterSurrender">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearSurrenderSearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid class="pardatagrid" @ref="_PendingSur" Data="@FilteredSur" TItem="PendingSur" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="10" Style="width:100%; min-width:700px;">
                    <Columns>
                        <RadzenDataGridColumn TItem="PendingSur" Property="archiveID" Title="Archive ID" Width="80px" />
                        <RadzenDataGridColumn TItem="PendingSur" Property="SurName" Title="Surrender Name" Width="120px" />
                        <RadzenDataGridColumn TItem="PendingSur" Property="PrpName" Title="Property Name" Width="150px" />
                        <RadzenDataGridColumn TItem="PendingSur" Property="Value" Title="Value" Width="80px" />
                        <RadzenDataGridColumn TItem="PendingSur" Property="ItemCond" Title="Item Condition" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingSur" Property="SurQTY" Title="Surrender QTY" Width="80px" />
                        <RadzenDataGridColumn TItem="PendingSur" Context="data" Title="Actions" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="data">
                                <div class="action-buttons">
                                    <button class="approve-btn" @onclick="() => ApproveSurrender(data)">
                                        <i class="fas fa-check"></i> Approve
                                    </button>
                                    <button class="disapprove-btn" @onclick="() => DisapproveSurrender(data)">
                                        <i class="fas fa-times"></i> Disapprove
                                    </button>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Transfer">
            <div class="w-full overflow-hidden">
                <div class="search-container mb-4">
                    <input type="text" class="search-input" placeholder="Search Transfer..." @bind="transSearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterTransfer">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearTransferSearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid @ref="_PendingTrans"
                                Data="@FilteredTrans"
                                TItem="PendingTrans"
                                AllowSorting="true"
                                AllowPaging="true"
                                AllowFiltering="true"
                                PageSize="10"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterMode="FilterMode.Advanced"
                                class="custom-radzen-grid"
                                Responsive="true"
                                Style="width: 100%;">
                    <Columns>
                        <RadzenDataGridColumn TItem="PendingTrans" Property="PtrId" Title="PRT ID" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Property="ItemCode" Title="Serial" Width="100px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Property="Description" Title="Description" Width="200px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Property="Name" Title="Name" Width="150px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Property="dateTransferred" Title="Date Transferred" Width="120px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Property="Condition" Title="Condition" Width="120px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Property="TransferType" Title="Transfer Type" Width="120px" />
                        <RadzenDataGridColumn TItem="PendingTrans" Context="data" Title="Actions" TextAlign="TextAlign.Center" Width="180px">
                            <Template Context="data">
                                <div class="action-buttons">
                                    <button class="approve-btn" @onclick="() => ApproveTransfer(data)">
                                        <i class="fas fa-check"></i> Approve
                                    </button>
                                    <button class="disapprove-btn" @onclick="() => DisapproveTransfer(data)">
                                        <i class="fas fa-times"></i> Disapprove
                                    </button>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    private List<PendingPAR>? PendingPARs;
    private RadzenDataGrid<PendingPAR>? PendingPAR;
    private List<PendingICS>? PendingICS;
    private RadzenDataGrid<PendingICS>? _PendingICS;
    private List<PendingSur>? PendingSur;
    private RadzenDataGrid<PendingSur>? _PendingSur;
    private List<PendingTrans>? PendingTrans;
    private RadzenDataGrid<PendingTrans>? _PendingTrans;

    private bool isEntryListCollapsed = false;
    private bool isICSListCollapsed = false;
    private bool isSurListCollapsed = false;
    private bool isTransferListCollapsed = false;

    private string parSearchTerm = "";
    private string icsSearchTerm = "";
    private string surSearchTerm = "";
    private string transSearchTerm = "";

    private List<PendingPAR>? FilteredPARs => PendingPARs?.Where(p => 
        string.IsNullOrEmpty(parSearchTerm) ||
        p.ItemCode.ToString().Contains(parSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        p.ItemName?.Contains(parSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.ItemDesc?.Contains(parSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.ParName?.Contains(parSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.refNo.ToString().Contains(parSearchTerm, StringComparison.OrdinalIgnoreCase)
    ).ToList();

    private List<PendingICS>? FilteredICS => PendingICS?.Where(i =>
        string.IsNullOrEmpty(icsSearchTerm) ||
        i.ItemCode.ToString().Contains(icsSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        i.Description?.Contains(icsSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        i.CSTCode?.Contains(icsSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        i.ICSName?.Contains(icsSearchTerm, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    private List<PendingSur>? FilteredSur => PendingSur?.Where(s =>
        string.IsNullOrEmpty(surSearchTerm) ||
        s.archiveID.ToString().Contains(surSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        s.SurName?.Contains(surSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        s.PrpName?.Contains(surSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        s.ItemCond?.Contains(surSearchTerm, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    private List<PendingTrans>? FilteredTrans => PendingTrans?.Where(t =>
        string.IsNullOrEmpty(transSearchTerm) ||
        t.PtrId.ToString().Contains(transSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        t.ItemCode.ToString().Contains(transSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        t.Description?.Contains(transSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.Name?.Contains(transSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.TransferType?.Contains(transSearchTerm, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    private void ToggleEntryList()
    {
        isEntryListCollapsed = !isEntryListCollapsed;
        StateHasChanged();
    }

    private void ToggleICSList()
    {
        isICSListCollapsed = !isICSListCollapsed;
        StateHasChanged();
    }

    private void ToggleSurList()
    {
        isSurListCollapsed = !isSurListCollapsed;
        StateHasChanged();
    }

    private void ToggleTransferList()
    {
        isEntryListCollapsed = !isEntryListCollapsed;
        StateHasChanged();
    }

    private void ShowTransferTable()
    {
        var options = new ModalOptions
        {
            Size = ModalSize.Automatic
        };
        ModalService.Show<PendingTransModal>("Pending Transfer", options);
    }

    private async Task ApprovePAR(PendingPAR par)
    {
        var parData = new
        {
            ParID = par.ParID,
            ItemCode = par.ItemCode,
            ItemName = par.ItemName,
            ItemDesc = par.ItemDesc,
            ParName = par.ParName,
            DprHeadName = par.DprHeadName,
            ParDate = par.ParDate,
            Classification = par.Classification,
            FundCls = par.FundCls,
            SourceCopies = par.SourceCopies,
            refNo = par.refNo,
            _value = par._value,
            ParQty = par.ParQty,
            Unit = par.Unit
            
        };

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/PAR", parData);
        if (response.IsSuccessStatusCode)
        {
            await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingPAR/byPendingParID/{par.ParID}");
            PendingPARs?.Remove(par);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "PAR has been successfully approved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to approve PAR. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task DisapprovePAR(PendingPAR par)
    {
        var response = await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingPAR/byPendingParID/{par.ParID}");
        if (response.IsSuccessStatusCode)
        {
            PendingPARs?.Remove(par);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "PAR has been successfully disapproved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to disapprove PAR. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task ApproveICS(PendingICS ics)
    {
        var icsData = new
        {
            ItemCode = ics.ItemCode,
            Description = ics.Description,
            CSTCode = ics.CSTCode,
            ICSName = ics.ICSName,
            ICSPrice = ics.ICSPrice,
            Life = ics.Life,
            Qty = ics.Qty,
            FundCluster = ics.FundCluster,
            Position = ics.Position,
            ICSSDate = ics.ICSSDate,
            IcsDateReceived = ics.IcsDateReceived
        };

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ICS", icsData);
        if (response.IsSuccessStatusCode)
        {
            await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingICS/byPendingICScode/{ics.ICSID}");
            PendingICS?.Remove(ics);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "ICS has been successfully approved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to approve ICS. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task DisapproveICS(PendingICS ics)
    {
        var response = await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingICS/byPendingICScode/{ics.ICSID}");
        if (response.IsSuccessStatusCode)
        {
            PendingICS?.Remove(ics);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "ICS has been successfully disapproved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to disapprove ICS. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task ApproveSurrender(PendingSur sur)
    {
        var surData = new
        {
            SurName = sur.SurName,
            PrpName = sur.PrpName,
            Description = sur.Description,
            archiveDate = DateTime.Now.ToString("yyyy-MM-dd"),
            Value = sur.Value,
            Clasification = sur.Clasification,
            Copies = sur.Copies,
            ItemCond = sur.ItemCond,
            SurQTY = sur.SurQTY,
        };

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ArchivedTransactions", surData);
        if (response.IsSuccessStatusCode)
        {
            await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingSur/byPendingarchiveID/{sur.archiveID}");
            PendingSur?.Remove(sur);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "Surrender has been successfully approved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to approve surrender. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task DisapproveSurrender(PendingSur sur)
    {
        var response = await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingSur/byPendingarchiveID/{sur.archiveID}");
        if (response.IsSuccessStatusCode)
        {
            PendingSur?.Remove(sur);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "Surrender has been successfully disapproved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to disapprove surrender. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task ApproveTransfer(PendingTrans trans)
    {
        var transData = new
        {
            ItemCode = trans.ItemCode,
            Description = trans.Description,
            CstCode = trans.CstCode,
            Name = trans.Name,
            dateTransferred = trans.dateTransferred,
            Condition = trans.Condition,
            rvName = trans.rvName,
            TransferType = trans.TransferType,
            apprvdBy = trans.apprvdBy,
            approvedByDate = trans.approvedByDate,
            designationOf = trans.designationOf,
            designationReceived = trans.designationReceived,
            designationRelease = trans.designationRelease,
            from = trans.from,
            fundccl = trans.fundccl,
            reason = trans.reason,
            receivedBy = trans.receivedBy,
            receivedByDate = trans.receivedByDate,
            releaseBy = trans.releaseBy,
            releaseByDate = trans.releaseByDate,
            to = trans.to,
            dateAcquired = trans.dateAcquired,
            Amount = trans.Amount
        };

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/Transfer", transData);
        if (response.IsSuccessStatusCode)
        {
            await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingTrans/byPendingptrid/{trans.PtrId}");
            PendingTrans?.Remove(trans);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "Transfer has been successfully approved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to approve transfer. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private async Task DisapproveTransfer(PendingTrans trans)
    {
        var response = await HttpClient.DeleteAsync($"https://localhost:7041/api/PendingTrans/byPendingptrid/{trans.PtrId}");
        if (response.IsSuccessStatusCode)
        {
            PendingTrans?.Remove(trans);
            StateHasChanged();
            
            var parameters = new ModalParameters();
            parameters.Add("Title", "Success!");
            parameters.Add("Message", "Transfer has been successfully disapproved.");
            parameters.Add("IsSuccess", true);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Title", "Error");
            parameters.Add("Message", "Failed to disapprove transfer. Please try again.");
            parameters.Add("IsSuccess", false);
            await ModalService.Show<StatusModal>("", parameters).Result;
        }
    }

    private void FilterPAR()
    {
        StateHasChanged();
    }

    private void FilterICS()
    {
        StateHasChanged();
    }

    private void FilterSurrender()
    {
        StateHasChanged();
    }

    private void FilterTransfer()
    {
        StateHasChanged();
    }

    private void ClearPARSearch()
    {
        parSearchTerm = "";
        StateHasChanged();
    }

    private void ClearICSSearch()
    {
        icsSearchTerm = "";
        StateHasChanged();
    }

    private void ClearSurrenderSearch()
    {
        surSearchTerm = "";
        StateHasChanged();
    }

    private void ClearTransferSearch()
    {
        transSearchTerm = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var parresponse = await HttpClient.GetAsync("https://localhost:7041/api/PendingPAR");
        if (parresponse.IsSuccessStatusCode)
        {
            var json = await parresponse.Content.ReadAsStringAsync();
            PendingPARs = JsonConvert.DeserializeObject<List<PendingPAR>>(json);
        }
        else
        {
            PendingPARs = new List<PendingPAR>();
        }

        var icsresponse = await HttpClient.GetAsync("https://localhost:7041/api/PendingICS");
        if (icsresponse.IsSuccessStatusCode)
        {
            var json = await icsresponse.Content.ReadAsStringAsync();
            PendingICS = JsonConvert.DeserializeObject<List<PendingICS>>(json);
        }
        else
        {
            PendingICS = new List<PendingICS>();
        }

        var surresponse = await HttpClient.GetAsync("https://localhost:7041/api/PendingSur");
        if (surresponse.IsSuccessStatusCode)
        {
            var json = await surresponse.Content.ReadAsStringAsync();
            PendingSur = JsonConvert.DeserializeObject<List<PendingSur>>(json);
        }
        else
        {
            PendingSur = new List<PendingSur>();
        }

        var transresponse = await HttpClient.GetAsync("https://localhost:7041/api/PendingTrans");
        if (transresponse.IsSuccessStatusCode)
        {
            var json = await transresponse.Content.ReadAsStringAsync();
            PendingTrans = JsonConvert.DeserializeObject<List<PendingTrans>>(json);
        }
        else
        {
            PendingTrans = new List<PendingTrans>();
        }
    }
}
