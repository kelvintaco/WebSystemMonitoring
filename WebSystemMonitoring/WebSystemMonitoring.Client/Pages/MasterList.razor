@using Radzen.Blazor;
@using MatBlazor;
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Globalization;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@using OfficeOpenXml;
@using System.IO
@page "/masterlist"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<h1>Master List</h1>

@if (IsLoading)
{
    <div class="spinner-border" role="status">
    </div>
}
else
{
    <RadzenDataGrid class="pardatagrid" @ref="grid" Data="@TransactList" TItem="PAR" AllowSorting="true" AllowPaging="true" PageSize="10">
        <Columns>
            <RadzenDataGridColumn TItem="PAR" Property="ParID" Title="ParID" />
            <RadzenDataGridColumn TItem="PAR" Property="ItemCode" Title="ItemCode" />
            <RadzenDataGridColumn TItem="PAR" Property="ItemName" Title="ItemName" />
            <RadzenDataGridColumn TItem="PAR" Property="ParName" Title="ParName" />
            <RadzenDataGridColumn TItem="PAR" Property="DprName" Title="DprName" />
            <RadzenDataGridColumn TItem="PAR" Property="ParDate" Title="ParDate" />
            <RadzenDataGridColumn TItem="PAR" Property="refNo" Title="RefNo" />
            <RadzenDataGridColumn TItem="PAR" Property="ParQty" Title="ParQty" />
        </Columns>
    </RadzenDataGrid>
}

<div class="mt-4 border p-4">
    <h4>Print Forms</h4>
    <div class="row">
        <div class="col-md-6">
            <label for="Code">Code</label>
            <RadzenFieldset>
                <RadzenLabel Text="ParID" />
                <RadzenDropDownDataGrid @bind-Value="SelectedPar" Data="ParIDList" AllowClear="true" AllowFiltering="true" Placeholder="Select an ID" Style="position: absolute;margin-bottom:20px" />
            </RadzenFieldset>
        </div>
        <div class="col-md-6">
            <label for="formtype">Form Type</label>
            <RadzenFieldset>
                <RadzenLabel Text="Form Type" />
                <RadzenDropDownDataGrid @bind-Value="SelectedFormType" Data="FormTypeList" AllowClear="false" AllowFiltering="false" Placeholder="Select a Form Type" Style="position: absolute;margin-bottom:20px" />
            </RadzenFieldset>
        </div>
    </div>
    <button class="btn btn-primary mt-2" @onclick="ShowModal">Confirm</button>
</div>

<CascadingBlazoredModal></CascadingBlazoredModal>
@code {
    private List<PAR>? TransactList;
    private List<string>? ParIDList;
    private List<string>? FormTypeList = new List<string> { "PAR", "ICS", "Surrender", "Transfer" };

    private string? SelectedPar;
	private string? SelectedFormType;

    private bool IsLoading = true;
    private RadzenDataGrid<PAR> grid;

    private string? AdditionalDetails;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var response = await HttpClient.GetAsync("https://localhost:7041/api/PAR");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            TransactList = JsonConvert.DeserializeObject<List<PAR>>(json);
        }
        else
        {
            TransactList = null;
        }
        var paridresponse = await HttpClient.GetAsync("https://localhost:7041/api/PAR/byParID");
        if (paridresponse.IsSuccessStatusCode)
        {
            var json = await paridresponse.Content.ReadAsStringAsync();
            ParIDList = await paridresponse.Content.ReadFromJsonAsync<List<string>>();
        }
        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    private void ShowModal()
    {
		if (SelectedFormType == "PAR")
		{
            var parameters = new ModalParameters();
            parameters.Add("SelectedPar", SelectedPar);

            ModalService.Show<PARModal>("PAR Details", parameters);
		}
		if (SelectedFormType == "ICS")
		{
			ModalService.Show<ICSModal>("");
		}
        if (SelectedFormType == "Surrender")
        {
            var parameters = new ModalParameters();
            parameters.Add("SelectedPar", SelectedPar);

            ModalService.Show<SurModal>("Surrender Details", parameters);
        }
        if (SelectedFormType == "Transfer")
        {
			var parameters = new ModalParameters();
			parameters.Add("SelectedPar", SelectedPar);

            ModalService.Show<TransModal>("Transfer Details", parameters);
        }
    }
   //  private void GenerateParFile()
   //  {
   //      var selectedPar = TransactList?.FirstOrDefault(p => p.ParID == SelectedPar);
   //      if (selectedPar == null) return;

   //      var existingFilePath = @"C:\Users\Admin\Downloads\various-form.xlsx";
   //      var newFilePath = @"C:\Users\Admin\Downloads\PARData.xlsx";

   //      var existingFile = new System.IO.FileInfo(existingFilePath);
   //      var newFile = new System.IO.FileInfo(newFilePath);

   //      if (!existingFile.Exists)
   //      {
   //          Console.WriteLine("Template file not found!");
   //          return;
   //      }
   //      using (var package = new ExcelPackage(existingFile))
   //      {
   //          var worksheet = package.Workbook.Worksheets["PAR"];
   //          if (worksheet == null)
   //          {
   //              Console.WriteLine("Worksheet 'PAR' not found!");
   //              return;
   //          }

   //          worksheet.Cells["F6"].Value = selectedPar.ParID;
   //          worksheet.Cells["E9"].Value = selectedPar.ItemCode;
   //          worksheet.Cells["C9"].Value = selectedPar.ItemName;
   //          worksheet.Cells["E40"].Value = selectedPar.ParName;
			// worksheet.Cells["C36"].Value = selectedPar.ParDate;
   //          worksheet.Cells["C35"].Value = selectedPar.refNo;
   //          worksheet.Cells["A9"].Value = selectedPar.ParQty;

   //          worksheet.Cells["D47"].Value = "Juan Dela Cruz";

   //          // Save to a new file
   //          package.SaveAs(newFile);
   //      }
   //  }
}
