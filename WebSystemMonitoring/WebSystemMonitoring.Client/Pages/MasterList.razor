@using Radzen.Blazor
@using MatBlazor
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Globalization
@using Newtonsoft.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using OfficeOpenXml
@using System.IO
@page "/masterlist"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<style>
    /* Custom styles for RadzenDataGrid */
    .custom-radzen-grid {
        border-radius: 0.5rem;
        overflow: hidden;
        border: 1px solid #e5e7eb;
        width: 100%;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
        .custom-radzen-grid ::deep .rz-datatable-header {
            background-color: #1f2937;
            color: white;
            font-weight: bold;
            padding: 1rem;
            border: none;
        }

        .custom-radzen-grid ::deep .rz-grid-table {
            width: 100%;
            table-layout: fixed;
        }

        .custom-radzen-grid ::deep .rz-datatable-scrollable-header {
            background-color: #1f2937;
        }

        .custom-radzen-grid ::deep .rz-datatable-scrollable-header-box {
            margin-right: 0 !important;
        }

        .custom-radzen-grid ::deep .rz-column-title {
            color: white;
            font-weight: 600;
            white-space: nowrap;
            overflow-x: auto;
            text-overflow: ellipsis;
            font-size: 0.85rem;
        }

        .custom-radzen-grid ::deep .rz-grid-table th {
            background-color: #1f2937;
            border-color: #374151;
            padding: 0.5rem;
        }

        .custom-radzen-grid ::deep .rz-grid-table tr {
            background-color: white;
            transition: background-color 0.2s;
        }

            .custom-radzen-grid ::deep .rz-grid-table tr:hover {
                background-color: #f9fafb;
            }

        .custom-radzen-grid ::deep .rz-grid-table td {
            padding: 0.5rem;
            border-color: #e5e7eb;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 0.875rem;
        }

        .custom-radzen-grid ::deep .rz-paginator {
            background-color: #f9fafb;
            border-top: 1px solid #e5e7eb;
            padding: 0.5rem;
            display: flex;
            justify-content: center;
        }

        .custom-radzen-grid ::deep .rz-paginator-element {
            color: #374151;
            font-weight: 500;
            background-color: transparent;
            margin: 0 0.25rem;
        }

            .custom-radzen-grid ::deep .rz-paginator-element:hover:not(.rz-state-disabled) {
                background-color: #e5e7eb;
                color: #111827;
            }

        .custom-radzen-grid ::deep .rz-paginator-page.rz-state-active {
            background-color: #1f2937;
            color: white;
        }

	body {
		overflow-x: hidden;
	}

    .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .collapse-button {
        background: none;
        border: none;
        color: #1f2937;
        cursor: pointer;
        padding: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1rem;
    }

    .collapse-button:hover {
        color: #4b5563;
    }

    .collapse-button i {
        transition: transform 0.3s ease;
    }

    .collapse-button.collapsed i {
        transform: rotate(-90deg);
    }

    .table-section {
        transition: all 0.3s ease;
    }

    .table-section.collapsed {
        display: none;
    }

    .search-container {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        align-items: center;
    }
    .search-input {
        flex: 1;
        padding: 0.5rem 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: border-color 0.2s;
    }
    .search-input:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
    }
    .search-input::placeholder {
        color: #9ca3af;
    }
    .search-button {
        background-color: #2563eb;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .search-button:hover {
        background-color: #1d4ed8;
    }
    .search-button:active {
        background-color: #1e40af;
    }
    .clear-button {
        background-color: #e5e7eb;
        color: #4b5563;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }
    .clear-button:hover {
        background-color: #d1d5db;
        color: #1f2937;
    }
    .clear-button:active {
        background-color: #9ca3af;
    }
</style>

<RadzenTabs RenderMode="TabRenderMode.Client" class="w-full">
    <Tabs>
        <RadzenTabsItem Text="Entry List">
            <div class="w-full overflow-hidden">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search Entry List..." @bind="entrySearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterEntryList">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearEntrySearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid @ref="grid"
                                Data="@FilteredEntryList"
                                TItem="PAR"
                                AllowSorting="true"
                                AllowPaging="true"
                                AllowFiltering="true"
                                PageSize="10"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterMode="FilterMode.Advanced"
                                class="custom-radzen-grid"
                                Responsive="true"
                                Style="width: 100%;">
                    <Columns>
                        <RadzenDataGridColumn TItem="PAR" Property="ParID" Title="PAR ID" Width="80px" />
                        <RadzenDataGridColumn TItem="PAR" Property="ItemCode" Title="Serial" Width="80px" />
                        <RadzenDataGridColumn TItem="PAR" Property="ItemName" Title="Item Name" Width="120px" />
                        <RadzenDataGridColumn TItem="PAR" Property="ItemDesc" Title="Description" Width="120px" />
                        <RadzenDataGridColumn TItem="PAR" Property="ParName" Title="Custodian" Width="120px" />
                        <RadzenDataGridColumn TItem="PAR" Property="DprHeadName" Title="Dept Head" Width="120px" />
                        <RadzenDataGridColumn TItem="PAR" Property="ParDate" Title="Date" Width="90px" />
                        <RadzenDataGridColumn TItem="PAR" Property="Classification" Title="Class" Width="120px" />
                        <RadzenDataGridColumn TItem="PAR" Property="FundCls" Title="Fund Source" Width="100px" />
                        <RadzenDataGridColumn TItem="PAR" Property="SourceCopies" Title="Dist. Copies" Width="100px" />
                        <RadzenDataGridColumn TItem="PAR" Property="refNo" Title="Ref No." Width="80px" />
                        <RadzenDataGridColumn TItem="PAR" Property="_value" Title="Value" Width="80px" FormatString="₱{0:N2}" />
                        <RadzenDataGridColumn TItem="PAR" Property="ParQty" Title="Quantity" Width="60px" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Transfer Records">
            <div class="w-full overflow-hidden">
                <div class="mb-2">
                    <button class="flex items-center gap-2 bg-blue-200 hover:bg-blue-300 active:bg-blue-400 text-black font-bold py-2 px-4 rounded-lg transition duration-200" @onclick="ShowTransferTable">
                        <i class="fas fa-external-link-alt text-blue-700"></i> See All
                    </button>
                </div>
                <div class="search-container mb-2">
                    <input type="text" class="search-input" placeholder="Search Transfer..." @bind="transferSearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterTransferList">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearTransferSearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid @ref="transfergrid"
                                Data="@FilteredTransferList"
                                TItem="Transfer"
                                AllowSorting="true"
                                AllowPaging="true"
                                AllowFiltering="true"
                                PageSize="10"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterMode="FilterMode.Advanced"
                                class="custom-radzen-grid"
                                Responsive="true"
                                Style="width: 100%;">
                    <Columns>
                        <RadzenDataGridColumn TItem="Transfer" Property="PtrId" Title="PRT ID" />
                        <RadzenDataGridColumn TItem="Transfer" Property="ItemCode" Title="Serial" />
                        <RadzenDataGridColumn TItem="Transfer" Property="Description" Title="Description" />
                        <RadzenDataGridColumn TItem="Transfer" Property="Name" Title="Name" />
                        <RadzenDataGridColumn TItem="Transfer" Property="dateTransferred" Title="Date Transferred" />
                        <RadzenDataGridColumn TItem="Transfer" Property="Condition" Title="Condition" />
                        <RadzenDataGridColumn TItem="Transfer" Property="TransferType" Title="Transfer Type" />
                        <RadzenDataGridColumn TItem="Transfer" Property="from" Title="From" />
                        <RadzenDataGridColumn TItem="Transfer" Property="to" Title="To" />
                        <RadzenDataGridColumn TItem="Transfer" Property="reason" Title="Reason" />
                        <RadzenDataGridColumn TItem="Transfer" Property="Amount" Title="Amount" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Item Inventory">
            <div class="w-full overflow-hidden">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search Item Inventory..." @bind="itemSearchTerm" @bind:event="oninput" />
                    <button class="search-button" @onclick="FilterItemList">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button class="clear-button" @onclick="ClearItemSearch">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
                <RadzenDataGrid @ref="itemgrid"
                                Data="@FilteredItemList"
                                TItem="Items"
                                AllowSorting="true"
                                AllowPaging="true"
                                AllowFiltering="true"
                                PageSize="10"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterMode="FilterMode.Advanced"
                                class="custom-radzen-grid"
                                Responsive="true"
                                Style="width: 100%;">
                    <Columns>
                        <RadzenDataGridColumn TItem="Items" Property="ItemCode" Title="Serial" />
                        <RadzenDataGridColumn TItem="Items" Property="ItemName" Title="Name" />
                        <RadzenDataGridColumn TItem="Items" Property="ItemDeets" Title="Details" />
                        <RadzenDataGridColumn TItem="Items" Property="Stock" Title="Stock" />
                        <RadzenDataGridColumn TItem="Items" Property="Place" Title="Place" />
                    </Columns>
                </RadzenDataGrid>
                <div class="flex justify-end mt-4">
                    <button class="flex items-center gap-2 bg-blue-200 hover:bg-blue-300 
                               active:bg-blue-400 text-black font-bold py-2 px-4 rounded-lg transition duration-200" 
                            @onclick="ShowAddItem">
                        <i class="fas fa-plus text-blue-700"></i> Add Item
                    </button>
                </div>
            </div>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

<div class="mt-4 border p-4 bg-white rounded-lg shadow-sm">
    <h5 class="text-lg font-bold text-gray-800 mb-2 flex items-center gap-2">
        <i class="fas fa-table-list text-blue-700"></i>
        Other Tables
    </h5>
    <div class="flex flex-wrap gap-3 mb-4">
        <button class="flex items-center gap-2 bg-yellow-200 hover:bg-yellow-300 
                       active:bg-yellow-400 text-black font-bold py-2 px-4 rounded-lg transition duration-200" @onclick="ShowSurrender">
            <i class="fas fa-undo text-yellow-700"></i> Surrendered
        </button>
        <button class="flex items-center gap-2 bg-purple-200 hover:bg-purple-300 
                       active:bg-purple-400 text-black font-bold py-2 px-4 rounded-lg transition duration-200" @onclick="ShowICS">
            <i class="fas fa-file-alt text-purple-700"></i> ICS
        </button>
        <button class="flex items-center gap-2 bg-purple-200 hover:bg-purple-300 
                       active:bg-purple-400 text-black font-bold py-2 px-4 rounded-lg transition duration-200" @onclick="ShowItemDisposal">
            <i class="fas fa-file-alt text-purple-700"></i> Item Disposal
        </button>
    </div>
</div>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    private List<PAR>? TransactList;
    private List<Items>? _itemlist;
    private RadzenDataGrid<Items> itemgrid;
    private RadzenDataGrid<PAR> grid;
    private List<Transfer>? TransferList;
    private RadzenDataGrid<Transfer> transfergrid;

    private string entrySearchTerm = "";
    private string transferSearchTerm = "";
    private string itemSearchTerm = "";

    private List<PAR>? FilteredEntryList => TransactList?.Where(p =>
        string.IsNullOrEmpty(entrySearchTerm) ||
        p.ParID?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.ItemCode.ToString().Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) ||
        p.ItemName?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.ItemDesc?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.ParName?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.DprHeadName?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.ParDate?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.Classification?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.FundCls?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.SourceCopies?.Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        p.refNo.ToString().Contains(entrySearchTerm, StringComparison.OrdinalIgnoreCase)
    ).ToList();

    private List<Transfer>? FilteredTransferList => TransferList?.Where(t =>
        string.IsNullOrEmpty(transferSearchTerm) ||
        t.PtrId.ToString().Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        t.ItemCode.ToString().Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        t.Description?.Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.Name?.Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.TransferType?.Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.from?.Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.to?.Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.reason?.Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        t.Amount.ToString().Contains(transferSearchTerm, StringComparison.OrdinalIgnoreCase)
    ).ToList();

    private List<Items>? FilteredItemList => _itemlist?.Where(i =>
        string.IsNullOrEmpty(itemSearchTerm) ||
        i.ItemCode.ToString().Contains(itemSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        i.ItemName?.Contains(itemSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        i.ItemDeets?.Contains(itemSearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
        i.Stock.ToString().Contains(itemSearchTerm, StringComparison.OrdinalIgnoreCase) ||
        i.Place?.Contains(itemSearchTerm, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    private void FilterEntryList() => StateHasChanged();
    private void FilterTransferList() => StateHasChanged();
    private void FilterItemList() => StateHasChanged();
    private void ClearEntrySearch() { entrySearchTerm = ""; StateHasChanged(); }
    private void ClearTransferSearch() { transferSearchTerm = ""; StateHasChanged(); }
    private void ClearItemSearch() { itemSearchTerm = ""; StateHasChanged(); }

    protected override async Task OnInitializedAsync()
    {
        // Load PAR data
        var response = await HttpClient.GetAsync("https://localhost:7041/api/PAR");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            TransactList = JsonConvert.DeserializeObject<List<PAR>>(json);
        }
        else
        {
            TransactList = new List<PAR>();
        }

        // Load Transfer data
        var transferResponse = await HttpClient.GetAsync("https://localhost:7041/api/Transfer");
        if (transferResponse.IsSuccessStatusCode)
        {
            var json = await transferResponse.Content.ReadAsStringAsync();
            TransferList = JsonConvert.DeserializeObject<List<Transfer>>(json);
        }
        else
        {
            TransferList = new List<Transfer>();
        }

        var itemresponse = await HttpClient.GetAsync("https://localhost:7041/api/Item");
        if (itemresponse.IsSuccessStatusCode)
        {
            var json = await itemresponse.Content.ReadAsStringAsync();
            _itemlist = JsonConvert.DeserializeObject<List<Items>>(json);
        }
        else
        {
            _itemlist = null;
        }
    }

    private void ShowSurrender()
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Automatic
            };
        ModalService.Show<SurrenderTableModal>("Surrender Records", options);
    }

    private void ShowICS()
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Automatic
            };
        ModalService.Show<ICSTableModal>("ICS Records", options);
    }

    private void ShowAddForm()
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Automatic,
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };
        ModalService.Show<AddForm>("", options);
    }
    private void ShowAddItem()
    {
        var options = new ModalOptions
            {
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };
        ModalService.Show<AddItem>("", options);
    }
    private void ShowItemDisposal()
    {
        var options = new ModalOptions
            {
                HideCloseButton = true,
                Size = ModalSize.Automatic
            };
        ModalService.Show<ItemDisposalTable>("Item Disposal", options);
    }

    private void ShowTransferTable()
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Automatic
            };
        ModalService.Show<TransferTableModal>("Transfer Records", options);
    }
}