@page "/archiveList"
@rendermode InteractiveAuto

@inject HttpClient HttpClient

<h1>Archive List</h1>

<RadzenDataGrid class="pardatagrid" @ref="grid" Data="@_archivelist" TItem="ArchivedTransactions" AllowSorting="true" AllowPaging="true" PageSize="10">
    <Columns>
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="archiveID" Title="archiveID" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="SurName" Title="SurName" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="PrpName" Title="PrpName" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="DprName" Title="DprName" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="Value" Title="Value" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="ItemCond" Title="ItemCond" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="SurQTY" Title="SurQTY" />
    </Columns>
</RadzenDataGrid>
<p></p>
<p></p>
<p></p>

<h1>Item Disposal</h1>
<RadzenDataGrid class="pardatagrid" @ref="disposalgrid" Data="@_itemdisposals" TItem="ItemDisposal" AllowSorting="true" AllowPaging="true" PageSize="10">
    <Columns>
        <RadzenDataGridColumn TItem="ItemDisposal" Property="NonServCode" Title="NonServCode" />
        <RadzenDataGridColumn TItem="ItemDisposal" Property="disposalName" Title="disposalName" />
        <RadzenDataGridColumn TItem="ItemDisposal" Property="Description" Title="Description" />
        <RadzenDataGridColumn TItem="ItemDisposal" Property="disposalDate" Title="disposalDate" />
    </Columns>
</RadzenDataGrid>

@code {
    private List<ArchivedTransactions>? _archivelist;
    private List<ItemDisposal>? _itemdisposals;
    private RadzenDataGrid<ArchivedTransactions> grid;
    private RadzenDataGrid<ItemDisposal> disposalgrid;

    protected override async Task OnInitializedAsync()
    {
        var Archiveresponse = await HttpClient.GetAsync("https://localhost:7041/api/ArchivedTransactions");
        if (Archiveresponse.IsSuccessStatusCode)
        {
            var json = await Archiveresponse.Content.ReadAsStringAsync();
            _archivelist = JsonConvert.DeserializeObject<List<ArchivedTransactions>>(json);
        }
        else
        {
            _archivelist = null;
        }
        var Disposalresponse = await HttpClient.GetAsync("https://localhost:7041/api/ItemDisposal");
        if (Disposalresponse.IsSuccessStatusCode)
        {
            var json = await Disposalresponse.Content.ReadAsStringAsync();
            _itemdisposals = JsonConvert.DeserializeObject<List<ItemDisposal>>(json);
        }
        else
        {
            _itemdisposals = null;
        }
	}
}
