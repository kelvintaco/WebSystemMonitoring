@rendermode InteractiveAuto

@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<h1>Archive List</h1>

<RadzenDataGrid class="pardatagrid" @ref="grid" Data="@_archivelist" TItem="ArchivedTransactions" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="10">
    <Columns>
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="archiveID" Title="archiveID" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="SurName" Title="SurName" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="PrpName" Title="PrpName" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="DprName" Title="DprName" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="Value" Title="Value" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="ItemCond" Title="ItemCond" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="SurQTY" Title="SurQTY" />
    </Columns>
</RadzenDataGrid>
<div class="button-row" style="margin-top: 20px;">
    <RadzenButton ButtonType="ButtonType.Button" Text="Close" Click="CloseModal" Variant="Variant.Text" />
</div>


@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    private List<ArchivedTransactions>? _archivelist;
    private RadzenDataGrid<ArchivedTransactions> grid;

    protected override async Task OnInitializedAsync()
    {
        var Archiveresponse = await HttpClient.GetAsync("https://localhost:7041/api/ArchivedTransactions");
        if (Archiveresponse.IsSuccessStatusCode)
        {
            var json = await Archiveresponse.Content.ReadAsStringAsync();
            _archivelist = JsonConvert.DeserializeObject<List<ArchivedTransactions>>(json);
        }
        else
        {
            _archivelist = null;
        }
	}
    private async Task CloseModal()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CloseAsync(ModalResult.Cancel());
        }
    }
}
