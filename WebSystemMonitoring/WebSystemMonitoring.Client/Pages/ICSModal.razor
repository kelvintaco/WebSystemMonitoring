@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/ics"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IModalService ModalService
@inject ILogger<ICS> Logger

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="/static/site.js"></script>

<PageTitle>ICS</PageTitle>

<div class="container mt-4">
    <h2 class="mb-4">ICS Details</h2>

    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Select ID:</label>
                    <RadzenDropDownDataGrid @bind-Value="SelectedPar"
                                            Data="ParIDList"
                                            TextProperty="List"
                                            ValueProperty="ParID"
                                            AllowClear="true"
                                            AllowFiltering="true"
                                            Placeholder="Select an ID"
                                            Class="w-100"
                                            Change="@OnParSelectionChanged" />
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(SelectedPar))
    {
        <div class="card">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label fw-bold">PAR Number:</label>
                        <p>@(SelectedPar ?? "N/A")</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Name:</label>
                        <p>@(Name ?? "N/A")</p>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Item Serial:</label>
                        <p>@(SelectedItemPARData?.ItemCode.ToString() ?? "N/A")</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Description:</label>
                        <p>@(_ItemDescription ?? "N/A")</p>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Quantity:</label>
                        <p>@(SelectedItemPARData?.ParQty.ToString() ?? "N/A")</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Price:</label>
                        <p>₱@(_Price.ToString("N2") ?? "N/A")</p>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Lifetime:</label>
                        <p>@(_Life > 0 ? $"{_Life} years" : "N/A")</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Custodian Code:</label>
                        <p>@(SelectedCstData?.CSTCode ?? "N/A")</p>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Date:</label>
                        <p>@DateTime.Now.ToString()</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Fund Cluster:</label>
                        <p>GF</p>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-12">
                        <label class="form-label fw-bold">Position/Office:</label>
                        <RadzenTextBox @bind-Value="_Position" Placeholder="Enter Position/Office" Required="true" class="w-100" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <RadzenButton Text="Generate ICS Form" Click="GenerateExcel" ButtonStyle="ButtonStyle.Primary" class="w-100" Disabled="@_isGenerating" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    private CancellationTokenSource cts = new CancellationTokenSource();

    public class ParDisplayInfo
    {
        public string ParID { get; set; } = string.Empty;
        public string ItemName { get; set; } = string.Empty;
        public string ParName { get; set; } = string.Empty;
        public string ItemDetails { get; set; } = string.Empty;
        public string List => $"{ParID} - {ItemName} ({ParName})";
    }

    private List<ParDisplayInfo>? ParIDList;
    private string? SelectedPar;
    private ParDisplayInfo? SelectedParInfo;
    private PAR? SelectedItemPARData;
    private Custodian? SelectedCstData;
    private string? _ItemDescription;
    private string? Name;
    private double _Price;
    private int _Life;
    private string? _Position;
    private bool _isGenerating;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing ICS component");
        var paridresponse = await HttpClient.GetAsync("https://localhost:7041/api/PAR/byParID");
        if (paridresponse.IsSuccessStatusCode)
        {
            var parIds = await paridresponse.Content.ReadFromJsonAsync<List<string>>();
            if (parIds != null)
            {
                ParIDList = new List<ParDisplayInfo>();
                foreach (var parId in parIds)
                {
                    var parResponse = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{parId}");
                    if (parResponse.IsSuccessStatusCode)
                    {
                        var parData = await parResponse.Content.ReadFromJsonAsync<PAR>();
                        if (parData != null)
                        {
                            var descResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{parData.ItemName}");
                            string itemDetails = descResponse.IsSuccessStatusCode ? await descResponse.Content.ReadAsStringAsync() : "";

                            ParIDList.Add(new ParDisplayInfo
                                {
                                    ParID = parId,
                                    ItemName = parData.ItemName,
                                    ParName = parData.ParName,
                                    ItemDetails = itemDetails
                                });
                        }
                    }
                }
                Logger.LogInformation($"Loaded {ParIDList.Count} PAR IDs");
            }
        }
        else
        {
            ParIDList = new List<ParDisplayInfo>();
            Logger.LogWarning("Failed to fetch PAR IDs: {StatusCode}", paridresponse.StatusCode);
        }

        if (!string.IsNullOrEmpty(SelectedPar))
        {
            SelectedParInfo = ParIDList?.FirstOrDefault(p => p.ParID == SelectedPar);
            await LoadParData();
        }
    }

    private async Task OnParSelectionChanged(object value)
    {
        SelectedPar = value as string;
        SelectedParInfo = ParIDList?.FirstOrDefault(p => p.ParID == SelectedPar);

        if (!string.IsNullOrEmpty(SelectedPar))
        {
            await LoadParData();
        }
        else
        {
            SelectedParInfo = null;
            SelectedItemPARData = null;
            SelectedCstData = null;
            _ItemDescription = null;
            Name = null;
            _Price = 0;
            _Life = 0;
            _Position = null;
            Logger.LogInformation("Cleared PAR selection");
        }
        StateHasChanged();
    }

    private async Task LoadParData()
    {
        if (string.IsNullOrEmpty(SelectedPar))
        {
            Logger.LogWarning("SelectedPar is null or empty. Cannot fetch PAR data.");
            return;
        }

        Logger.LogInformation("Loading PAR data for {ParID}", SelectedPar);
        var parResponse = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
        if (parResponse.IsSuccessStatusCode)
        {
            SelectedItemPARData = await parResponse.Content.ReadFromJsonAsync<PAR>();
            if (SelectedItemPARData != null)
            {
                var descResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{SelectedItemPARData.ItemName}");
                if (descResponse.IsSuccessStatusCode)
                {
                    var itemDetails = await descResponse.Content.ReadAsStringAsync();
                    _ItemDescription = $"{SelectedItemPARData.ItemName} - {itemDetails}";
                }
                else
                {
                    _ItemDescription = SelectedItemPARData.ItemName;
                }

                var priceResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItemPARData.ItemName}");
                if (priceResponse.IsSuccessStatusCode)
                {
                    _Price = await priceResponse.Content.ReadFromJsonAsync<double>();
                }
                else
                {
                    Logger.LogWarning("Failed to fetch Price: {StatusCode}", priceResponse.StatusCode);
                }

                var response = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/getparname/{SelectedItemPARData.ParID}");
                if (response.IsSuccessStatusCode)
                {
                    Name = await response.Content.ReadAsStringAsync();
                }
                else
                {
                    Logger.LogWarning("Failed to fetch Name: {StatusCode}", response.StatusCode);
                }

                var liferesponse = await HttpClient.GetAsync($"https://localhost:7041/api/Items/getLifetimeByName/{SelectedItemPARData.ItemName}");
                if (liferesponse.IsSuccessStatusCode)
                {
                    _Life = await liferesponse.Content.ReadFromJsonAsync<int>();
                }
                else
                {
                    Logger.LogWarning("Failed to fetch Life: {StatusCode}", liferesponse.StatusCode);
                }

                var cstResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Custodian/getCstCode/{SelectedItemPARData.ParName}");
                if (cstResponse.IsSuccessStatusCode)
                {
                    var cstCode = await cstResponse.Content.ReadAsStringAsync();
                    SelectedCstData = new Custodian { CSTCode = cstCode };
                }
                else
                {
                    Logger.LogWarning("Failed to fetch CST Code: {StatusCode}", cstResponse.StatusCode);
                }
            }
            else
            {
                Logger.LogWarning("SelectedItemPARData is null after deserialization for {ParID}", SelectedPar);
            }
        }
        else
        {
            Logger.LogWarning("Failed to fetch PAR data for {ParID}: {StatusCode}", SelectedPar, parResponse.StatusCode);
        }
        StateHasChanged();
    }

    private async Task GenerateExcel()
    {
        if (SelectedItemPARData == null)
        {
            Logger.LogWarning("No PAR data available to generate ICS form.");
            return;
        }
        if (_isGenerating)
        {
            Logger.LogInformation("Generate ścianExcel is already in progress. Ignoring duplicate call.");
            return;
        }

        _isGenerating = true;
        Logger.LogInformation("Starting GenerateExcel");

        if (string.IsNullOrEmpty(_Position))
        {
            Logger.LogWarning("Position is required to generate ICS form.");
            _isGenerating = false;
            return;
        }

        var icsData = new ICSData
            {
                ItemCode = SelectedItemPARData.ItemCode,
                Description = _ItemDescription,
                CSTCode = SelectedCstData?.CSTCode,
                ICSName = Name,
                ICSPrice = _Price,
                LifeTime = _Life,
                Qty = SelectedItemPARData.ParQty,
                IcsDate = DateOnly.FromDateTime(DateTime.Now),
                FundCluster = "GF",
                Position = _Position
            };

        var icsResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ICS", icsData);
        if (!icsResponse.IsSuccessStatusCode)
        {
            Logger.LogError("Failed to save ICS data. Status: {StatusCode}, Reason: {ReasonPhrase}", icsResponse.StatusCode, icsResponse.ReasonPhrase);
            _isGenerating = false;
            return;
        }

        var excelResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-ics", icsData);
        if (excelResponse.IsSuccessStatusCode)
        {
            var fileBytes = await excelResponse.Content.ReadAsByteArrayAsync();
            var pdfBase64 = Convert.ToBase64String(fileBytes);

            var parameters = new ModalParameters();
            parameters.Add("PdfBase64", pdfBase64);
            var options = new ModalOptions
                {
                    HideCloseButton = true,
                    DisableBackgroundCancel = true
                };
            ModalService.Show<ICSPreview>("Preview", parameters, options);
        }
        else
        {
            var errorContent = await excelResponse.Content.ReadAsStringAsync();
            Logger.LogError("Failed to generate ICS PDF. Status: {StatusCode}, Reason: {ReasonPhrase}, Content: {Content}", excelResponse.StatusCode, excelResponse.ReasonPhrase, errorContent);
        }

        _isGenerating = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    public class PAR
    {
        public string ParID { get; set; } 
        public int ItemCode { get; set; }
        public string ItemName { get; set; } 
        public string ParName { get; set; } 
        public int ParQty { get; set; }
    }

    public class Custodian
    {
        public string CSTCode { get; set; } 
    }

    public class ICSData
    {
        public int ICSID { get; set; }
        public int ItemCode { get; set; }
        public string Description { get; set; } 
        public string CSTCode { get; set; } 
        public string ICSName { get; set; }
        public double ICSPrice { get; set; }
        public int LifeTime { get; set; }
        public int Qty { get; set; }
        public DateOnly IcsDate { get; set; }
        public string Position { get; set; }
        public DateOnly ICSSDate { get; set; }
        public DateOnly IcsDateReceived { get; set; }
        public string FundCluster { get; set; }
    }
}