@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@using Blazored.Modal
@using Blazored.Modal.Services
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IModalService ModalService

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="/static/site.js"></script>

<div class="container mt-4">
    <h2 class="mb-4">ICS Details</h2>

    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold">PAR Number:</label>
                    <p>@SelectedPar</p>
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-bold">Name:</label>
                    <p>@Name</p>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Item Code:</label>
                    <p>@SelectedItemPARData?.ItemCode</p>
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-bold">Description:</label>
                    <p>@SelectedItemPARData?.ItemName</p>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Quantity:</label>
                    <p>@SelectedItemPARData?.ParQty</p>
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-bold">Price:</label>
                    <p>₱@_Price.ToString("N2")</p>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Lifetime:</label>
                    <p>@_Life years</p>
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-bold">CST Code:</label>
                    <p>@SelectedCstData?.CSTCode</p>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Date:</label>
                    <p>@DateTime.Now.ToString("MM/dd/yyyy")</p>
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-bold">Fund Cluster:</label>
                    <p>GF</p>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-12">
                    <label class="form-label fw-bold">Position/Office:</label>
                    <RadzenTextBox @bind-Value="_Position" Placeholder="Enter Position/Office" Required="true" class="w-100" />
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <RadzenButton Text="Generate ICS Form" Click="GenerateExcel" ButtonStyle="ButtonStyle.Primary" class="w-100" />
                </div>
            </div>
        </div>
    </div>
</div>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    [Parameter] public string SelectedPar { get; set; }
    private PAR SelectedItemPARData;
    private Custodian SelectedCstData;

    private string? Name;
    private double _Price;
    private int _Life;
    private string? _Position;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(SelectedPar))
        {
            Console.WriteLine("SelectedPar is null or empty. Cannot fetch PAR data.");
            return;
        }

        var parResponse = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
        if (parResponse.IsSuccessStatusCode)
        {
            SelectedItemPARData = await parResponse.Content.ReadFromJsonAsync<PAR>();
            if (SelectedItemPARData != null)
            {
                var priceResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItemPARData.ItemName}");
                if (priceResponse.IsSuccessStatusCode)
                {
                    _Price = await priceResponse.Content.ReadFromJsonAsync<double>();
                }
                else
                {
                    Console.WriteLine($"Failed to fetch Price: {await priceResponse.Content.ReadAsStringAsync()}");
                }

                var response = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/getparname/{SelectedItemPARData.ParID}");
                if (response.IsSuccessStatusCode)
                {
                    Name = await response.Content.ReadAsStringAsync();
                }
                else
                {
                    Console.WriteLine($"Failed to fetch Name: {await response.Content.ReadAsStringAsync()}");
                }

                var liferesponse = await HttpClient.GetAsync($"https://localhost:7041/api/Items/getLifetimeByName/{SelectedItemPARData.ItemName}");
                if (liferesponse.IsSuccessStatusCode)
                {
                    _Life = await liferesponse.Content.ReadFromJsonAsync<int>();
                }
                else
                {
                    Console.WriteLine($"Failed to fetch Life: {await liferesponse.Content.ReadAsStringAsync()}");
                }

                var cstResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Custodian/getCstCode/{SelectedItemPARData.ParName}");
                if (cstResponse.IsSuccessStatusCode)
                {
                    var cstCode = await cstResponse.Content.ReadAsStringAsync();
                    SelectedCstData = new Custodian { CSTCode = cstCode };
                }
                else
                {
                    Console.WriteLine($"Failed to fetch CST Code: {await cstResponse.Content.ReadAsStringAsync()}");
                }
            }
            else
            {
                Console.WriteLine("SelectedItemPARData is null after deserialization.");
            }
        }
        else
        {
            Console.WriteLine($"Failed to fetch PAR data: {await parResponse.Content.ReadAsStringAsync()}");
        }
    }

    private async Task GenerateExcel()
    {
        if (SelectedItemPARData == null)
        {
            Console.WriteLine("No PAR data available to generate ICS form.");
            return;
        }

        if (string.IsNullOrEmpty(_Position))
        {
            Console.WriteLine("Position is required to generate ICS form.");
            return;
        }

        // Save ICS data to the database
        var icsInput = new ICSData
            {
                ItemCode = SelectedItemPARData.ItemCode,
                Description = SelectedItemPARData.ItemName,
                CSTCode = SelectedCstData?.CSTCode,
                ICSName = Name,
                ICSPrice = _Price,
                LifeTime = _Life,
                Qty = SelectedItemPARData.ParQty,
                IcsDate = DateOnly.FromDateTime(DateTime.Now),
                FundCluster = "GF",
                Position = _Position
            };

        var icsResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/ICS", icsInput);
        if (!icsResponse.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to save ICS data. Status: {icsResponse.StatusCode}, Reason: {icsResponse.ReasonPhrase}");
            return;
        }

        // Generate ICS PDF for preview
        var icsData = new ICSData
            {
                ICSID = 0,
                ItemCode = SelectedItemPARData.ItemCode,
                Description = SelectedItemPARData.ItemName,
                CSTCode = SelectedCstData?.CSTCode,
                ICSName = Name,
                ICSPrice = _Price,
                LifeTime = _Life,
                Qty = SelectedItemPARData.ParQty,
                IcsDate = DateOnly.FromDateTime(DateTime.Now),
                Position = _Position,
                FundCluster = "GF"
            };

        var excelResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-ics", icsData);
        if (excelResponse.IsSuccessStatusCode)
        {
            var fileBytes = await excelResponse.Content.ReadAsByteArrayAsync();
            var pdfBase64 = Convert.ToBase64String(fileBytes);

            // Open preview modal
            var parameters = new ModalParameters();
            parameters.Add("PdfBase64", pdfBase64);
            ModalService.Show<ICSPreview>("ICS Document Preview", parameters);
        }
        else
        {
            var errorContent = await excelResponse.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to generate ICS PDF. Status: {excelResponse.StatusCode}, Reason: {excelResponse.ReasonPhrase}, Content: '{errorContent}'");
        }
    }

    public class PAR
    {
        public string ParID { get; set; }
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
        public string ParName { get; set; }
        public int ParQty { get; set; }
    }

    public class Custodian
    {
        public string CSTCode { get; set; }
    }

    public class ICSData
    {
        public int ICSID { get; set; }
        public int ItemCode { get; set; }
        public string Description { get; set; }
        public string CSTCode { get; set; }
        public string ICSName { get; set; }
        public double ICSPrice { get; set; }
        public int LifeTime { get; set; }
        public int Qty { get; set; }
        public DateOnly IcsDate { get; set; }
        public string Position { get; set; }
        public DateOnly ICSSDate { get; set; }
        public DateOnly IcsDateReceived { get; set; }
        public string FundCluster { get; set; }
    }
}