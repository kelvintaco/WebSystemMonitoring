@using OfficeOpenXml
@using System.IO
@using System.Globalization
@using System.Text
@using Radzen.Blazor
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/ics"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IModalService ModalService
@inject ILogger<ICS> Logger
@inject NavigationManager NavigationManager
@inject NavigationManager NavigationManager
@inject Radzen.ThemeService ThemeService

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="/static/site.js"></script>
<script src="/js/theme.js"></script>

<PageTitle>ICS</PageTitle>

<style>
    .main-row {
        display: flex;
        flex-wrap: nowrap;
        gap: 20px;
        padding: 20px;
        border: 1px solid rgba(18, 42, 255, 0.5);
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .bottom-row {
        display: flex;
        gap: 20px;
        padding: 20px;
        border: 1px solid rgba(18, 42, 255, 0.5);
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    .bottom-row > div {
        flex: 1;
        padding: 15px;
        border: 1px solid rgba(18, 42, 255, 0.15);
        border-radius: 6px;
        background-color: white;
    }

    .button-row {
        display: flex;
        justify-content: center;
        gap: 10px;
        padding: 20px;
        border: 1px solid rgba(18, 42, 255, 0.5);
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    input[type="submit"], button {
        padding: 8px 20px;
        border: 1px solid #6B46C1;
        border-radius: 4px;
        background-color: #6B46C1;
        color: white;
        cursor: pointer;
        transition: background-color 0.2s;
        margin: 20px 0px 0px 0px;
    }

    input[type="submit"]:hover, button:hover {
        background-color: #553C9A;
    }

    input[type="submit"]:disabled, button:disabled {
        background-color: #9F7AEA;
        border-color: #9F7AEA;
        cursor: not-allowed;
    }

    .info-tooltip {
        position: relative;
        display: inline-block;
    }
    .info-tooltip .tooltip-text {
        visibility: hidden;
        width: max-content;
        max-width: 220px;
        background-color: #333;
        color: #fff;
        text-align: left;
        border-radius: 4px;
        padding: 6px 10px;
        position: absolute;
        z-index: 10;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.2s;
        font-size: 0.95em;
        pointer-events: none;
    }
    .info-tooltip:hover .tooltip-text,
    .info-tooltip:focus-within .tooltip-text {
        visibility: visible;
        opacity: 1;
    }
</style>

<h1 class="mb-4">Inventory Custodian Slip (ICS)</h1>
<RadzenForm id="form">
    <div class="main-row">
        <div class="form-group">
            <span style="display: flex; align-items: center;">
                <RadzenLabel Text="Quantity" Style="margin-bottom:0;" />
                <span class="info-tooltip" tabindex="0" style="margin-left:5px;">
                    <i class="fas fa-info-circle" style="color:#3182ce;"></i>
                    <span class="tooltip-text">Available: @currentStock</span>
                </span>
            </span>
            <RadzenNumeric @bind-Value="Qty" Required="true" Min="1" Max="@currentStock" Style="width:70px;" />
            @* @if (currentStock > 0)
            {
                <span style="margin-left: 5px; color: #666;">(Available: @currentStock)</span>
            } *@
        </div>
        <div class="form-group">
            <RadzenLabel Text="Unit" />
            <RadzenTextBox @bind-Value="Unit" Style="width:100px;" Placeholder="Enter Unit" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Item:" />
            <RadzenDropDownDataGrid @bind-Value="SelectedItem" 
                Data="ItemList" 
                TextProperty="DisplayText"
                ValueProperty="ItemName"
                AllowClear="false" 
                AllowFiltering="true" 
                Placeholder="Select an Item" 
                Required="true" 
                Style="width:400px;" 
                Change="@OnItemSelected" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Details"/>
            <RadzenTextBox Value="@(ItemDetails ?? "N/A")" ReadOnly="true" Style="width:250px;" Placeholder="Brand/Specifications/Etc" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Date" />
            <RadzenDatePicker TValue="DateOnly" @bind-Value="Date" Required="true" DateFormat="yyyy-MM-dd" Style="width:120px;" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Property No." />
            <RadzenTextBox Value="@ItemCode.ToString()" ReadOnly="true" Style="width:100px;" />
        </div>
        <div class="form-group">
            <span style="display: flex; align-items: center;">
                <RadzenLabel Text="Total Value" Style="margin-bottom:0;" />
                <span class="info-tooltip" tabindex="0" style="margin-left:5px;">
                    <i class="fas fa-info-circle" style="color:#3182ce;"></i>
                    <span class="tooltip-text">Max 49,999</span>
                </span>
            </span>
            <RadzenTextBox Value="@value.ToString("C", new CultureInfo("en-PH"))" ReadOnly="true" Style="width:100px;" />
        </div>
    </div>
    <div name="itemaddlink" style="margin: 10px 0 20px 0; text-align: center;">
        <span @onclick="ShowAddItemModal" style="color: #007bff; cursor: pointer; text-decoration: underline; font-size: 0.95em;">item does not exist?</span>
    </div>
    <div class="bottom-row">
        <div>
            <RadzenLabel Text="Received By:" />
            <RadzenTextBox @bind-Value="Name" />
        </div>
        <div>
            <RadzenLabel Text="Position/Office:" />
            <RadzenTextBox @bind-Value="Position" Required="true" Placeholder="Enter Position/Office" />
        </div>
        <div>
            <RadzenLabel Text="Item Location:" />
            <RadzenTextBox @bind-Value="ItemPlace" Required="true" Placeholder="Enter where the item will be placed" />
        </div>
    </div>

    <div class="button-row">
        <input type="submit" value="Submit" @onclick="GenerateExcel" disabled="@_isGenerating" />
        <button type="button" @onclick="CancelForm" disabled="@_isGenerating">Cancel</button>
    </div>
</RadzenForm>
<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    [CascadingParameter] private BlazoredModalInstance ModalInstance { get; set; } = default!;
    private CancellationTokenSource cts = new CancellationTokenSource();

    public class ItemDisplayInfo
    {
        public string? ItemName { get; set; }
        public int Stock { get; set; }
        public string? ItemDetails { get; set; }
        public string DisplayText => $"{ItemName} - {ItemDetails} (Stock: {Stock})";
    }

    private List<ItemDisplayInfo>? ItemList;
    private string? SelectedItem;
    private string? Name;
    private string? Position;
    private int qty;
    private int Qty
    {
        get => qty;
        set
        {
            qty = value;
            UpdateTotalValue(); // Recalculate total value when Qty changes
        }
    }
    private DateOnly Date = DateOnly.FromDateTime(DateTime.Today);
    private int ItemCode;
    private double value;
    private string? Unit;
    private string? ItemDetails;
    private string? ItemPlace;
    private int currentStock;
    private double _Price;
    private int _Life;
    private string? _Position;
    private bool _isGenerating;
    private Custodian? SelectedCstData;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItemList();
    }

    private async Task RefreshItemList()
    {
        try
        {
            Logger.LogInformation("Refreshing item list...");
            var response = await HttpClient.GetAsync("https://localhost:7041/api/Item/byItemNamesWithStock");
            if (response.IsSuccessStatusCode)
            {
                ItemList = await response.Content.ReadFromJsonAsync<List<ItemDisplayInfo>>();
                
                if (ItemList != null)
                {
                    foreach (var item in ItemList)
                    {
                        var detailsResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{item.ItemName}");
                        item.ItemDetails = detailsResponse.IsSuccessStatusCode 
                            ? await detailsResponse.Content.ReadAsStringAsync() 
                            : "No details available";
                    }
                    Logger.LogInformation($"Retrieved {ItemList.Count} items with stock > 0");
                }
                else
                {
                    ItemList = new List<ItemDisplayInfo>();
                    Logger.LogWarning("Item list is null after API call");
                }
            }
            else
            {
                ItemList = new List<ItemDisplayInfo>();
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to get items: {response.StatusCode} - {error}");
            }
        }
        catch (Exception ex)
        {
            ItemList = new List<ItemDisplayInfo>();
            Logger.LogError(ex, "Error refreshing item list");
        }
    }

    private async Task<string> GenerateCSTCode()
    {
        var random = new Random();
        var existingCSTCodes = await GetExistingCSTCodes();
        while (true)
        {
            var randomCode = $"CST{random.Next(100, 1000)}";
            if (!existingCSTCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingCSTCodes()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Custodian/GetLatest");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string>();
        }
        return new List<string>();
    }

    private async Task OnItemSelected(object value)
    {
        SelectedItem = value as string;
        var selectedItemInfo = ItemList?.FirstOrDefault(i => i.ItemName == SelectedItem);

        if (string.IsNullOrEmpty(SelectedItem) || selectedItemInfo == null)
        {
            Logger.LogInformation("Item selection cleared");
            ResetItemFields();
            return;
        }

        try
        {
            Logger.LogInformation("Selected item: {ItemName}", SelectedItem);
            currentStock = selectedItemInfo.Stock;
            if (Qty > currentStock)
            {
                Qty = currentStock;
            }
            ItemDetails = selectedItemInfo.ItemDetails;

            var itemCodeResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemCode/{SelectedItem}");
            if (itemCodeResponse.IsSuccessStatusCode)
            {
                ItemCode = await itemCodeResponse.Content.ReadFromJsonAsync<int>();
            }
            else
            {
                ItemCode = 0;
                Logger.LogWarning("Failed to fetch item code for {ItemName}", SelectedItem);
            }

            var valueResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{selectedItemInfo.ItemName}");
            if (valueResponse.IsSuccessStatusCode)
            {
                _Price = await valueResponse.Content.ReadFromJsonAsync<float>();
                value = Qty * _Price;
            }
            else
            {
                value = 0;
                Logger.LogWarning("Failed to fetch item value for {ItemName}", SelectedItem);
            }

            var liferesponse = await HttpClient.GetAsync($"https://localhost:7041/api/Items/getLifetimeByName/{selectedItemInfo.ItemName}");
            if (liferesponse.IsSuccessStatusCode)
            {
                _Life = await liferesponse.Content.ReadFromJsonAsync<int>();
            }
            else
            {
                Logger.LogWarning("Failed to fetch Life: {StatusCode}", liferesponse.StatusCode);
            }

            var cstResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Custodian/getCstCode/{Name}");
            if (cstResponse.IsSuccessStatusCode)
            {
                var cstCode = await cstResponse.Content.ReadAsStringAsync();
                SelectedCstData = new Custodian { CSTCode = cstCode };
            }
            else
            {
                Logger.LogWarning("Failed to fetch CST Code: {StatusCode}", cstResponse.StatusCode);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnItemSelected for {ItemName}", SelectedItem);
            await ShowValidationErrorModal();
        }
    }

    private void ResetItemFields()
    {
        ItemDetails = null;
        ItemCode = 0;
        value = 0;
        currentStock = 0;
        Qty = 0;
        Unit = null;
        //_Life = 0;
        SelectedCstData = null;
        StateHasChanged();
    }
    private void UpdateTotalValue()
    {
        value = Qty * _Price; // Recalculate total value as Qty * _Price
        StateHasChanged(); // Update the UI to reflect the new total value
    }
    private async Task GenerateExcel()
    {
        if (_isGenerating)
        {
            Logger.LogInformation("GenerateExcel is already in progress. Ignoring duplicate call.");
            return;
        }

        _isGenerating = true;
        Logger.LogInformation("Starting GenerateExcel");

        if (string.IsNullOrEmpty(SelectedItem) || string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Position) || 
            string.IsNullOrEmpty(Unit) || Qty <= 0 || Date == default || string.IsNullOrEmpty(ItemPlace))
        {
            Logger.LogWarning("Form submission failed due to missing or invalid fields.");
            await ShowValidationErrorModal();
            _isGenerating = false;
            return;
        }

        // Check if total value exceeds 49,999
        if (value > 49999)
        {
            Logger.LogWarning("Total value exceeds 49,999. Current value: {Value}", value);
            await ShowValidationErrorModal();
            _isGenerating = false;
            return;
        }

        var cstCode = await GenerateCSTCode();
        var custodianData = new
        {
            CSTCode = cstCode,
            CSTName = Name,
            DPRName = Position
        };

        var custodianDataJson = System.Text.Json.JsonSerializer.Serialize(custodianData);
        Logger.LogInformation("Posting Custodian data");
        var postCustodian = await HttpClient.PostAsync(
            "https://localhost:7041/api/Custodian",
            new StringContent(custodianDataJson, Encoding.UTF8, "application/json")
        );
        if (!postCustodian.IsSuccessStatusCode)
        {
            string responseText = await postCustodian.Content.ReadAsStringAsync();
            Logger.LogError($"Custodian API failed with status code {postCustodian.StatusCode}: {responseText}");
            await ShowValidationErrorModal();
            _isGenerating = false;
            return;
        }

        string? lastICSID = null;
        string? pdfBase64 = null;

        for (int i = 0; i < Qty; i++)
        {
            var icsData = new ICSData
            {
                ItemCode = ItemCode,
                Description = $"{SelectedItem} - {ItemDetails}",
                CSTCode = cstCode,
                ICSName = Name,
                ICSPrice = value,
                Life = _Life,
                Qty = Qty,
                IcsDate = Date,
                Position = Position,
                Unit = Unit,
                ItemPlace = ItemPlace,
                FundCluster = "GF",
                ICSSDate = Date,
                IcsDateReceived = Date
            };

            var icsResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/PendingICS", icsData);
            if (!icsResponse.IsSuccessStatusCode)
            {
                Logger.LogError("Failed to save ICS data. Status: {StatusCode}, Reason: {ReasonPhrase}", icsResponse.StatusCode, icsResponse.ReasonPhrase);
                _isGenerating = false;
                return;
            }

            if (i == Qty - 1)
            {
                var excelResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-ics", icsData);
                if (excelResponse.IsSuccessStatusCode)
                {
                    var fileBytes = await excelResponse.Content.ReadAsByteArrayAsync();
                    pdfBase64 = Convert.ToBase64String(fileBytes);

                    var parameters = new ModalParameters();
                    parameters.Add("PdfBase64", pdfBase64);
                    var options = new ModalOptions
                    {
                        HideCloseButton = true,
                        DisableBackgroundCancel = true
                    };
                    ModalService.Show<ICSPreview>("Preview", parameters, options);
                }
                else
                {
                    var errorContent = await excelResponse.Content.ReadAsStringAsync();
                    Logger.LogError("Failed to generate ICS PDF. Status: {StatusCode}, Reason: {ReasonPhrase}, Content: {Content}", excelResponse.StatusCode, excelResponse.ReasonPhrase, errorContent);
                }
            }
        }

        _isGenerating = false;
        StateHasChanged();
    }

    private async Task ShowValidationErrorModal()
    {
        Logger.LogInformation("Showing Validation Error Modal");
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        var parameters = new ModalParameters();
        await ModalService.Show<ErrorAddForm>("Validation Error", parameters, options).Result;
        Logger.LogInformation("Validation error modal closed");
    }

    private async Task ShowAddItemModal()
    {
        var options = new ModalOptions
            {
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };
        var result = await ModalService.Show<AddItemICS>("Add New Item", options).Result;
        if (!result.Cancelled)
        {
            await RefreshItemList();
        }
    }

    private async Task CancelForm()
    {
        Logger.LogInformation("CancelForm triggered");
        NavigationManager.NavigateTo("/ics", forceLoad: true);
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    public class Custodian
    {
        public string CSTCode { get; set; } 
    }

    public class ICSData
    {
        public int ICSID { get; set; }
        public int ItemCode { get; set; }
        public string Description { get; set; } 
        public string CSTCode { get; set; } 
        public string ICSName { get; set; }
        public double ICSPrice { get; set; }
        public int Life { get; set; }
        public int Qty { get; set; }
        public DateOnly IcsDate { get; set; }
        public string Position { get; set; }
        public string Unit { get; set; }
        public string ItemPlace { get; set; }
        public DateOnly ICSSDate { get; set; }
        public DateOnly IcsDateReceived { get; set; }
        public string FundCluster { get; set; }
    }
}