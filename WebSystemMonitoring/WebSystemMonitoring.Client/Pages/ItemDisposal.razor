@rendermode InteractiveAuto

@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">

<h1>Item Disposal</h1>
<RadzenDataGrid class="pardatagrid" @ref="disposalgrid" Data="@_itemdisposals" TItem="ItemDisposal" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="10">
    <Columns>
        <RadzenDataGridColumn TItem="ItemDisposal" Property="NonServCode" Title="NonServCode" />
        <RadzenDataGridColumn TItem="ItemDisposal" Property="disposalName" Title="disposalName" />
        <RadzenDataGridColumn TItem="ItemDisposal" Property="Description" Title="Description" />
        <RadzenDataGridColumn TItem="ItemDisposal" Property="disposalDate" Title="disposalDate" />
    </Columns>
</RadzenDataGrid>
<div class="button-row" style="margin-top: 20px;">
    <RadzenButton ButtonType="ButtonType.Button" Text="Close" Click="CloseModal" Variant="Variant.Text" />
</div>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    private List<ItemDisposal>? _itemdisposals;
    private RadzenDataGrid<ItemDisposal> disposalgrid;

    protected override async Task OnInitializedAsync()
    {
        var Disposalresponse = await HttpClient.GetAsync("https://localhost:7041/api/ItemDisposal");
        if (Disposalresponse.IsSuccessStatusCode)
        {
            var json = await Disposalresponse.Content.ReadAsStringAsync();
            _itemdisposals = JsonConvert.DeserializeObject<List<ItemDisposal>>(json);
        }
        else
        {
            _itemdisposals = null;
        }
    }
    private async Task CloseModal()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CloseAsync(ModalResult.Cancel());
        }
    }
    
}
