@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@rendermode InteractiveAuto

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="https://localhost:7041/static/site.js"></script>

<h1>Transfer Details</h1>

<div>
    <RadzenTextBox @bind-Value="FundCluster" Placeholder="Enter Fund Cluster" />
    <RadzenTextBox @bind-Value="FromName" Placeholder="From Name" />
    <RadzenTextBox @bind-Value="ToName" Placeholder="To Name" />
    <RadzenTextBox @bind-Value="ItemCondition" Placeholder="Item Condition" />

    <RadzenCheckBox @bind-Value="TransferType1" />
    <label>Transfer Type 1</label>
    <RadzenCheckBox @bind-Value="TransferType2" />
    <label>Transfer Type 2</label>
    <RadzenCheckBox @bind-Value="TransferType3" />
    <label>Transfer Type 3</label>
    <RadzenCheckBox @bind-Value="TransferType4" />
    <label>Transfer Type 4</label>

    @if (TransferType4)
    {
        <RadzenTextBox @bind-Value="TransferType4Details" Placeholder="Enter details for Transfer Type 4" />
    }

    <RadzenTextArea @bind-Value="ReasonForTransfer" Placeholder="Reason for Transfer" />

    <RadzenTextBox @bind-Value="ApprovedBy" Placeholder="Approved By" />
    <RadzenDatePicker TValue="DateOnly" @bind-Value="ApprovedDate" Required="true" DateFormat="yyyy-MM-dd" />
    <RadzenTextBox @bind-Value="ReleasedBy" Placeholder="Released By" />
    <RadzenDatePicker TValue="DateOnly" @bind-Value="ReleasedDate" Required="true" DateFormat="yyyy-MM-dd" />
    <RadzenTextBox @bind-Value="ReceivedBy" Placeholder="Received By" />
    <RadzenDatePicker TValue="DateOnly" @bind-Value="ReceivedDate" Required="true" DateFormat="yyyy-MM-dd" />
    <RadzenTextBox @bind-Value="Designation" Placeholder="Designation" />

    <RadzenButton Text="Submit" Click="OnSubmit" />
</div>

@code {
    [Parameter] public string SelectedPar { get; set; }
    private Transfer Transfer;
    private PAR SelectedParData;
    private Items SelectedItemData;
    private Custodian SelectedCstData;

    public string? FundCluster;
    public string? FromName;
    public string? ToName;
    public bool TransferType1;
    public bool TransferType2;
    public bool TransferType3;
    public bool TransferType4;
    public string? TransferType4Details;
    public string? ReasonForTransfer;
    public string? ApprovedBy;
    public string? ReleasedBy;
    public string? ReceivedBy;
    public string? Designation;
    public string? ItemCondition;
    public DateOnly Date = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly ApprovedDate = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly ReleasedDate = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly ReceivedDate = DateOnly.FromDateTime(DateTime.Today);

    private int PrtId;
    private int ItemCode;
    private string? Description;
    private int CstCode;
    private string? Name;
    private DateOnly dateTransferred;
    private string? Condition;
    public string? receiveName;
    private string? TransferType;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(SelectedPar))
        {
            Console.WriteLine("SelectedPar is null or empty. Cannot fetch PAR data.");
            return;
        }

        Console.WriteLine($"Fetching PAR data for SelectedPar: {SelectedPar}");
        var response = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
        if (response.IsSuccessStatusCode)
        {
            SelectedParData = await response.Content.ReadFromJsonAsync<PAR>();
            if (SelectedParData == null)
            {
                Console.WriteLine("SelectedParData is null after deserialization.");
                return;
            }

            Console.WriteLine($"SelectedParData retrieved: ItemName={SelectedParData.ItemName}, ParName={SelectedParData.ParName}");

            // Fetch Item data
            if (!string.IsNullOrEmpty(SelectedParData.ItemName))
            {
                Console.WriteLine($"Fetching Item data for ItemName: {SelectedParData.ItemName}");
                var itemResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemByName/{SelectedParData.ItemName}");
                if (itemResponse.IsSuccessStatusCode)
                {
                    SelectedItemData = await itemResponse.Content.ReadFromJsonAsync<Items>();
                    Console.WriteLine(SelectedItemData != null
                        ? "SelectedItemData retrieved successfully."
                        : "SelectedItemData is null after deserialization.");
                }
                else
                {
                    var errorContent = await itemResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to fetch Item data. Status: {itemResponse.StatusCode}, Reason: {itemResponse.ReasonPhrase}, Content: '{errorContent}'");
                }
            }
            else
            {
                Console.WriteLine("SelectedParData.ItemName is null or empty. Cannot fetch Item data.");
            }

            // Fetch Custodian data
            if (!string.IsNullOrEmpty(SelectedParData.ParName))
            {
                Console.WriteLine($"Fetching Custodian CSTCode for ParName: {SelectedParData.ParName}");
                var cstResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Custodian/getCstCode/{SelectedParData.ParName}");
                if (cstResponse.IsSuccessStatusCode)
                {
                    var cstCode = await cstResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Raw Custodian response: {cstCode}");
                    if (!string.IsNullOrEmpty(cstCode))
                    {
                        SelectedCstData = new Custodian { CSTCode = cstCode };
                        Console.WriteLine($"SelectedCstData CSTCode retrieved: {SelectedCstData.CSTCode}");
                    }
                    else
                    {
                        Console.WriteLine("CSTCode is empty in the response.");
                    }
                }
                else
                {
                    var errorContent = await cstResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to fetch Custodian CSTCode. Status: {cstResponse.StatusCode}, Reason: {cstResponse.ReasonPhrase}, Content: '{errorContent}'");
                }
            }
            else
            {
                Console.WriteLine("SelectedParData.ParName is null or empty. Cannot fetch Custodian data.");
            }
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to fetch PAR data. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}, Content: '{errorContent}'");
        }
    }

    private async Task OnSubmit()
    {
        if (SelectedParData == null || SelectedCstData == null)
        {
            Console.WriteLine("Required data is missing (PAR or Custodian data).");
            return;
        }

        string transferType = GetTransferType();

        var transfer = new TransferData
			{
            //PtrId = await GeneratePrtId(),
			    ItemCode = SelectedParData.ItemCode,
			    Description = SelectedParData.ItemName,
                CstCode = SelectedCstData?.CSTCode,
			    Name = SelectedParData.ParName,
                dateTransferred = DateOnly.FromDateTime(DateTime.Now),
			    Condition = ItemCondition,
			    receiveName = ReceivedBy,
			    TransferType = transferType,
				approvedBy = ApprovedBy,
                approvedByDate = ApprovedDate.ToString("yyyy-MM-dd"),
				designation = Designation,
				designationReceived = Designation,
				designationRelease = Designation,
				from = FromName,
				FundCluster = FundCluster,
				reason = ReasonForTransfer,
				receivedBy = ReceivedBy,
				receivedByDate = ReceivedDate.ToString("yyyy-MM-dd"),
				releaseBy = ReleasedBy,
				releaseByDate = ReleasedDate.ToString("yyyy-MM-dd"),
				to = ToName
			};

        var insertResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/Transfer", transfer);
        if (insertResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("Transfer data inserted successfully.");

            var transferexcel = new TransferData
            {
                    ItemCode = SelectedParData.ItemCode,
                    Description = SelectedParData.ItemName,
                    CstCode = SelectedCstData.CSTCode,
                    Name = SelectedParData.ParName,
                    dateTransferred = DateOnly.FromDateTime(DateTime.Now),
                    Condition = ItemCondition,
                    receiveName = ReceivedBy,
                    TransferType = transferType,
                    FundCluster = FundCluster,
                    FromName = FromName,
                    ToName = ToName,
                    ReasonForTransfer = ReasonForTransfer,
                    ApprovedBy = ApprovedBy,            
                    ReleasedBy = ReleasedBy,            
                    Designation = Designation
            };

            // Generate Excel file
            var excelResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-transfer", transferexcel);
            if (excelResponse.IsSuccessStatusCode)
            {
                var fileBytes = await excelResponse.Content.ReadAsByteArrayAsync();
                try
                {
                    //await JSRuntime.InvokeVoidAsync("downloadFile", "TransferData.xlsx", Convert.ToBase64String(fileBytes), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                    await JSRuntime.InvokeVoidAsync("downloadFile", "TransData.pdf", Convert.ToBase64String(fileBytes), "application/pdf");
                    Console.WriteLine("File generated and download triggered successfully.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to trigger download: {ex.Message}");
                }
            }
            else
            {
                var errorContent = await excelResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to generate Excel file. Status: {excelResponse.StatusCode}, Reason: {excelResponse.ReasonPhrase}, Content: '{errorContent}'");
            }
        }
        else
        {
            var errorContent = await insertResponse.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to insert transfer data. Status: {insertResponse.StatusCode}, Reason: {insertResponse.ReasonPhrase}, Content: '{errorContent}'");
        }
    }

    // private async Task<int> GeneratePrtId()
    // {
    //     var random = new Random();
    //     var existingPrtCodes = await GetExistingPrtId();

    //     while (true)
    //     {
    //         var randomCode = random.Next(100, 1000);
    //         if (!existingPrtCodes.Contains(randomCode))
    //         {
    //             return randomCode;
    //         }
    //     }
    // }

    // private async Task<List<int>> GetExistingPrtId()
    // {
    //     var response = await HttpClient.GetAsync("https://localhost:7041/api/Transfer/GetLatest");
    //     var json = await response.Content.ReadAsStringAsync();
    //     var existingPrtCodes = JsonConvert.DeserializeObject<List<int>>(json);
    //     return existingPrtCodes;
    // }

    private string GetTransferType()
    {
        if (TransferType1) return "Donation";
        if (TransferType2) return "Relocate";
        if (TransferType3) return "Reassignment";
        if (TransferType4) return $"{TransferType4Details ?? "No details provided"}";
        return "None"; // Default if no transfer type is selected
    }

    public class TransferData
    {
        public int PtrId { get; set; }
        public int ItemCode { get; set; }
        public string? Description { get; set; }
        public string? CstCode { get; set; }
        public string? Name { get; set; }
        public DateOnly dateTransferred { get; set; }
        public string? Condition { get; set; }
        public string? TransferType { get; set; }
        public string? FundCluster { get; set; }
        public string? FromName { get; set; }
        public string? ToName { get; set; }
        public string? ReasonForTransfer { get; set; }
        public string? ApprovedBy { get; set; }
        public string? ReleasedBy { get; set; }
        public string? Designation { get; set; }
		public string? receiveName { get; set; }

        public string fundcluster { get; set; }
        public string from { get; set; }
        public string to { get; set; }
        public string reason { get; set; }
        public string approvedBy { get; set; }
        public string designation { get; set; }
        public string approvedByDate { get; set; }
        public string releaseBy { get; set; }
        public string designationRelease { get; set; }
        public string releaseByDate { get; set; }
        public string receivedBy { get; set; }
        public string designationReceived { get; set; }
        public string receivedByDate { get; set; }

    }
}