@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/transfer"
@rendermode InteractiveAuto

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IModalService ModalService

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="/static/site.js"></script>

<h1>Transfer Details</h1>

<div class="container mt-4">
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label fw-bold">Entity Name:</label>
            <p>@SelectedParData?.ParName</p>
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">Fund Cluster:</label>
            <RadzenTextBox @bind-Value="FundCluster" Placeholder="Enter Fund Cluster" />
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">Date:</label>
            <RadzenDatePicker TValue="DateOnly" @bind-Value="Date" DateFormat="yyyy-MM-dd" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label fw-bold">From Accountable Officer/Agency/Fund Cluster:</label>
            <RadzenTextBox @bind-Value="FromName" Placeholder="From Accountable Officer/Agency/Fund Cluster" />
        </div>
        <div class="col-md-6">
            <label class="form-label fw-bold">To Accountable Officer/Agency/Fund Cluster:</label>
            <RadzenTextBox @bind-Value="ToName" Placeholder="To Accountable Officer/Agency/Fund Cluster" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label fw-bold">PTR No.:</label>
            <p>@SelectedParData?.ItemCode</p>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-12">
            <label class="form-label fw-bold">Transfer Type (only check one):</label>
            <div class="form-check">
                <RadzenCheckBox TValue="bool" Name="transferType1" @bind-Value="TransferType1" /> Donation
            </div>
            <div class="form-check">
                <RadzenCheckBox TValue="bool" Name="transferType2" @bind-Value="TransferType2" /> Relocate
            </div>
            <div class="form-check">
                <RadzenCheckBox TValue="bool" Name="transferType3" @bind-Value="TransferType3" /> Reassignment
            </div>
            <div class="form-check d-flex align-items-center">
                <RadzenCheckBox TValue="bool" Name="transferType4" @bind-Value="TransferType4" /> Others (specify):
                <RadzenTextBox @bind-Value="TransferType4Details" Placeholder="Specify if Others" class="ms-2" />
            </div>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-2">
            <label class="form-label fw-bold">Date Acquired:</label>
            <p>@SelectedParData?.ParDate</p>
        </div>
        <div class="col-md-2">
            <label class="form-label fw-bold">Property No.:</label>
            <p>@SelectedParData?.ItemCode</p>
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Description:</label>
            <p>@SelectedParData?.ItemName</p>
        </div>
        <div class="col-md-2">
            <label class="form-label fw-bold">Condition of PPE:</label>
            <RadzenTextBox @bind-Value="ItemCondition" Placeholder="Condition of PPE" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-12">
            <label class="form-label fw-bold">Reason for Transfer:</label>
            <RadzenTextArea @bind-Value="ReasonForTransfer" Placeholder="Reason for Transfer" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-4">
            <label class="form-label fw-bold">Approved By:</label>
            <RadzenTextBox @bind-Value="ApprovedBy" Placeholder="Printed Name" />
            <RadzenTextBox @bind-Value="Designation" Placeholder="Designation" />
            <RadzenDatePicker TValue="DateOnly" @bind-Value="ApprovedDate" DateFormat="yyyy-MM-dd" />
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Released/Issued By:</label>
            <RadzenTextBox @bind-Value="ReleasedBy" Placeholder="Printed Name" />
            <RadzenTextBox @bind-Value="designationRelease" Placeholder="Designation" />
            <RadzenDatePicker TValue="DateOnly" @bind-Value="ReleasedDate" DateFormat="yyyy-MM-dd" />
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Received By:</label>
            <RadzenTextBox @bind-Value="ReceivedBy" Placeholder="Printed Name" />
            <RadzenTextBox @bind-Value="designationReceived" Placeholder="Designation" />
            <RadzenDatePicker TValue="DateOnly" @bind-Value="ReceivedDate" DateFormat="yyyy-MM-dd" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-12">
            <RadzenButton Text="Submit" Click="OnSubmit" ButtonStyle="ButtonStyle.Primary" />
        </div>
    </div>
</div>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    [Parameter] public string SelectedPar { get; set; }
    private Transfer Transfer;
    private PAR SelectedParData;
    private Items SelectedItemData;
    private Custodian SelectedCstData;

    public string? FundCluster;
    public string? FromName;
    public string? ToName;
    public bool TransferType1;
    public bool TransferType2;
    public bool TransferType3;
    public bool TransferType4;
    public string? TransferType4Details;
    public string? ReasonForTransfer;
    public string? ApprovedBy;
    public string? ReleasedBy;
    public string? ReceivedBy;
    public string? Designation;
    public string? ItemCondition;
    public DateOnly Date = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly ApprovedDate = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly ReleasedDate = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly ReceivedDate = DateOnly.FromDateTime(DateTime.Today);

    private int PrtId;
    private int ItemCode;
    private string? Description;
    private int CstCode;
    private string? Name;
    private DateOnly dateTransferred;
    private string? Condition;
    public string? receiveName;
    private string? TransferType;
    public string dateAcquired;
    public string designationRelease;
    public string designationReceived;
    public string fundccl;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(SelectedPar))
        {
            Console.WriteLine("SelectedPar is null or empty. Cannot fetch PAR data.");
            return;
        }

        Console.WriteLine($"Fetching PAR data for SelectedPar: {SelectedPar}");
        var response = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
        if (response.IsSuccessStatusCode)
        {
            SelectedParData = await response.Content.ReadFromJsonAsync<PAR>();
            if (SelectedParData == null)
            {
                Console.WriteLine("SelectedParData is null after deserialization.");
                return;
            }

            Console.WriteLine($"SelectedParData retrieved: ItemName={SelectedParData.ItemName}, ParName={SelectedParData.ParName}");

            // Fetch Item data
            if (!string.IsNullOrEmpty(SelectedParData.ItemName))
            {
                Console.WriteLine($"Fetching Item data for ItemName: {SelectedParData.ItemName}");
                var itemResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemByName/{SelectedParData.ItemName}");
                if (itemResponse.IsSuccessStatusCode)
                {
                    SelectedItemData = await itemResponse.Content.ReadFromJsonAsync<Items>();
                    Console.WriteLine(SelectedItemData != null
                        ? "SelectedItemData retrieved successfully."
                        : "SelectedItemData is null after deserialization.");
                }
                else
                {
                    var errorContent = await itemResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to fetch Item data. Status: {itemResponse.StatusCode}, Reason: {itemResponse.ReasonPhrase}, Content: '{errorContent}'");
                }
            }
            else
            {
                Console.WriteLine("SelectedParData.ItemName is null or empty. Cannot fetch Item data.");
            }

            // Fetch Custodian data
            if (!string.IsNullOrEmpty(SelectedParData.ParName))
            {
                Console.WriteLine($"Fetching Custodian CSTCode for ParName: {SelectedParData.ParName}");
                var cstResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Custodian/getCstCode/{SelectedParData.ParName}");
                if (cstResponse.IsSuccessStatusCode)
                {
                    var cstCode = await cstResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Raw Custodian response: {cstCode}");
                    if (!string.IsNullOrEmpty(cstCode))
                    {
                        SelectedCstData = new Custodian { CSTCode = cstCode };
                        Console.WriteLine($"SelectedCstData CSTCode retrieved: {SelectedCstData.CSTCode}");
                    }
                    else
                    {
                        Console.WriteLine("CSTCode is empty in the response.");
                    }
                }
                else
                {
                    var errorContent = await cstResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to fetch Custodian CSTCode. Status: {cstResponse.StatusCode}, Reason: {cstResponse.ReasonPhrase}, Content: '{errorContent}'");
                }
            }
            else
            {
                Console.WriteLine("SelectedParData.ParName is null or empty. Cannot fetch Custodian data.");
            }
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to fetch PAR data. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}, Content: '{errorContent}'");
        }
    }

    private async Task OnSubmit()
    {
        if (SelectedParData == null || SelectedCstData == null)
        {
            Console.WriteLine("Required data is missing (PAR or Custodian data).");
            return;
        }

        if (string.IsNullOrEmpty(ItemCondition) || string.IsNullOrEmpty(ReasonForTransfer) || string.IsNullOrEmpty(ApprovedBy) ||
            string.IsNullOrEmpty(ReleasedBy) || string.IsNullOrEmpty(ReceivedBy) || string.IsNullOrEmpty(Designation))
        {
            Console.WriteLine("Required fields (ItemCondition, ReasonForTransfer, ApprovedBy, ReleasedBy, ReceivedBy, Designation) are missing.");
            return;
        }

        string transferType = GetTransferType();
        if (transferType == "None")
        {
            Console.WriteLine("A transfer type must be selected.");
            return;
        }

        var transfer = new TransferData
            {
                ItemCode = SelectedParData.ItemCode,
                Description = SelectedParData.ItemName,
                CstCode = SelectedCstData.CSTCode,
                Name = SelectedParData.ParName,
                DateTransferred = Date,
                Condition = ItemCondition,
                rvName = ReceivedBy,
                TransferType = transferType,
                apprvdBy = ApprovedBy,
                approvedByDate = ApprovedDate.ToString("yyyy-MM-dd"),
                designationOf = Designation,
                designationReceived = Designation,
                designationRelease = Designation,
                from = FromName,
                fundccl = FundCluster,
                reason = ReasonForTransfer,
                receivedBy = ReceivedBy,
                receivedByDate = ReceivedDate.ToString("yyyy-MM-dd"),
                releaseBy = ReleasedBy,
                releaseByDate = ReleasedDate.ToString("yyyy-MM-dd"),
                to = ToName,
                dateAcquired = SelectedParData.ParDate,
                Amount = SelectedParData.ParQty
            };

        var insertResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/Transfer", transfer);
        if (insertResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("Transfer data inserted successfully.");

            var transferexcel = new TransferData
                {
                    ItemCode = SelectedParData.ItemCode,
                    Description = SelectedParData.ItemName,
                    CstCode = SelectedCstData.CSTCode,
                    Name = SelectedParData.ParName,
                    DateTransferred = Date,
                    Condition = ItemCondition,
                    ReceiveName = ReceivedBy,
					rvName = ReceivedBy,
                    TransferType = transferType,
                    FundCluster = FundCluster,
					fundccl = FundCluster,
                    FromName = FromName,
					from = FromName,
                    ToName = ToName,
                    to = ToName,
                    ReasonForTransfer = ReasonForTransfer,
					reason = ReasonForTransfer,
                    ApprovedBy = ApprovedBy,
					apprvdBy = ApprovedBy,
                    ReleasedBy = ReleasedBy,
					releaseBy = ReleasedBy,
                    receivedBy = ReceivedBy,
                    Designation = Designation,
					designationOf = Designation,
                    approvedByDate = ApprovedDate.ToString("yyyy-MM-dd"),
                    releaseByDate = ReleasedDate.ToString("yyyy-MM-dd"),
                    receivedByDate = ReceivedDate.ToString("yyyy-MM-dd"),
                    dateAcquired = SelectedParData.ParDate,
                    Amount = SelectedParData.ParQty,
                    designationRelease = designationRelease,
                    designationReceived = designationReceived
                };

            // Generate PDF file
            var excelResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-transfer", transferexcel);
            if (excelResponse.IsSuccessStatusCode)
            {
                var fileBytes = await excelResponse.Content.ReadAsByteArrayAsync();
                var pdfBase64 = Convert.ToBase64String(fileBytes);

                // Open preview modal
                var parameters = new ModalParameters();
                parameters.Add("PdfBase64", pdfBase64);
				var options = new ModalOptions
					{
						HideCloseButton = true,
						DisableBackgroundCancel = true
					};
                ModalService.Show<TransferPreview>("Preview", parameters, options);
            }
            else
            {
                var errorContent = await excelResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to generate PDF file. Status: {excelResponse.StatusCode}, Reason: {excelResponse.ReasonPhrase}, Content: '{errorContent}'");
            }
        }
        else
        {
            var errorContent = await insertResponse.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to insert transfer data. Status: {insertResponse.StatusCode}, Reason: {insertResponse.ReasonPhrase}, Content: '{errorContent}'");
        }
    }

    private string GetTransferType()
    {
        if (TransferType1) return "Donation";
        if (TransferType2) return "Relocate";
        if (TransferType3) return "Reassignment";
        if (TransferType4) return $"{TransferType4Details ?? "No details provided"}";
        return "None"; // Default if no transfer type is selected
    }

    public class PAR
    {
        public string ParID { get; set; }
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
        public string ParName { get; set; }
        public string ParDate { get; set; }
        public int ParQty { get; set; }
    }

    public class Items
    {
        public int ItemCode { get; set; }
        public string ItemName { get; set; }
    }

    public class Custodian
    {
        public string CSTCode { get; set; }
    }

    public class TransferData
    {
        public int PtrId { get; set; }
        public int ItemCode { get; set; }
        public string Description { get; set; }
        public string CstCode { get; set; }
        public string Name { get; set; }
        public DateOnly DateTransferred { get; set; }
        public string Condition { get; set; }
        public string ReceiveName { get; set; }
        public string TransferType { get; set; }
        public string FundCluster { get; set; }
        public string FromName { get; set; }
        public string ToName { get; set; }
        public string ReasonForTransfer { get; set; }
        public string ApprovedBy { get; set; }
        public string ReleasedBy { get; set; }
        public string Designation { get; set; }
        public string fundccl { get; set; }
        public string from { get; set; }
        public string to { get; set; }
        public string reason { get; set; }
        public string apprvdBy { get; set; }
        public string designationOf { get; set; }
        public string approvedByDate { get; set; }
        public string releaseBy { get; set; }
        public string designationRelease { get; set; }
        public string releaseByDate { get; set; }
        public string receivedBy { get; set; }
        public string designationReceived { get; set; }
        public string receivedByDate { get; set; }
        public string dateAcquired { get; set; }
        public int Amount { get; set; }
        public string rvName { get; set; }
    }
}