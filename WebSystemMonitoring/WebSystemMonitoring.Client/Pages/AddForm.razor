@using Radzen.Blazor
@using System.Globalization
@using Newtonsoft.Json.Linq
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using Blazored.Modal.Services
@page "/addform"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<h1>Add Transaction</h1>

<RadzenForm id="form">
    <RadzenFieldset>
        <RadzenLabel Text="Recipient Name" />
        <RadzenTextBox @bind-Value="CSTName" Required="true" />
        @if (string.IsNullOrEmpty(CSTName))
        {
            <p class="validationmessage" style="color:red;">Name is required</p>
        }
    </RadzenFieldset>
    <RadzenFieldset>
        <RadzenLabel Text="Department" />
        <RadzenTextBox @bind-Value="DPRName" Required="true" />
        @if (string.IsNullOrEmpty(DPRName))
        {
            <p class="validationmessage" style="color:red;">Department is required.</p>
        }
    </RadzenFieldset>
    <RadzenFieldset>
        <RadzenLabel Text="Quantity" />
        <RadzenNumeric @bind-Value="ParQty" Required="true" Min="1" />
        @if (ParQty <= 0)
        {
            <p class="validationmessage" style="color:red;">Quantity must be greater than 0.</p>
        }
    </RadzenFieldset>
    <RadzenFieldset>
        <RadzenLabel Text="Date" />
        <RadzenDatePicker TValue="DateOnly" @bind-Value="Date" Required="true" DateFormat="yyyy-MM-dd" />
        @if (Date == default)
        {
            <p class="validationmessage" style="color:red;">Date is required.</p>
        }
    </RadzenFieldset>
    <div name="itemdropdown">
        <RadzenFieldset>
            <RadzenLabel Text="Item" />
            <RadzenDropDownDataGrid @bind-Value="SelectedItem" Data="ItemList" AllowClear="false" AllowFiltering="true" Placeholder="Select an Item" Required="true" Style="position: absolute; margin-bottom:20px" />
            @if (string.IsNullOrEmpty(SelectedItem))
            {
                <p></p>
                <p class="validationmessage" style="color:red;">Item selection is required.</p>
            }
        </RadzenFieldset>
    </div>

    <input type="submit" value="Submit" @onclick="SubmitForm" style="margin-top: 20px;" />
</RadzenForm>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    @inject ILogger<AddForm> Logger

    public List<string>? ItemList;
    public List<string>? CSTList;

    public string? LatestCSTCode;
    public string? LatestParCode;

    public string? ParID;
    public string? CSTName;
    public string? DPRName;
    public int ParQty;
    public DateOnly Date = DateOnly.FromDateTime(DateTime.Today); // Default to today
    public string? SelectedItem;
    public int referenceNo;
    public int ItemCode;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Item/byItemNames");
        if (response.IsSuccessStatusCode)
        {
            ItemList = await response.Content.ReadFromJsonAsync<List<string>>();
        }
    }

    private async Task SubmitForm()
    {
        try
        {
            // Validate all fields before proceeding
            if (string.IsNullOrEmpty(CSTName) || string.IsNullOrEmpty(DPRName) || ParQty <= 0 || Date == default || string.IsNullOrEmpty(SelectedItem))
            {
                Logger.LogWarning("Form submission failed due to missing or invalid fields.");
                await ShowValidationErrorModal();
                return;
            }

            Console.WriteLine("SubmitForm() started");

            var random = new Random();
            referenceNo = random.Next(100000, 999999);
            var selectedItem = SelectedItem;
            var itemCodeResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemCode/{selectedItem}");
            if (itemCodeResponse.IsSuccessStatusCode)
            {
                var itemCode = await itemCodeResponse.Content.ReadFromJsonAsync<int>();
                ItemCode = itemCode;
            }

            var formData = new
            {
                ParID = await GenerateParCode(),
                ItemCode = ItemCode,
                ItemName = SelectedItem,
                ParName = CSTName,
                DPRName = DPRName,
                ParDate = Date.ToString("yyyy-MM-dd"),
                refNo = referenceNo,
                ParQty = ParQty
            };

            var custodianData = new
            {
                CSTCode = await GenerateCSTCode(),
                CSTName = CSTName,
                DPRName = DPRName
            };

            var formDataJson = JsonConvert.SerializeObject(formData);
            var custodianDataJson = JsonConvert.SerializeObject(custodianData);

            Console.WriteLine(JsonConvert.SerializeObject(custodianData));
            Console.WriteLine(JsonConvert.SerializeObject(formData));

            var postPar = await HttpClient.PostAsync(
                "https://localhost:7041/api/PAR",
                new StringContent(formDataJson, Encoding.UTF8, "application/json")
            );
            if (!postPar.IsSuccessStatusCode)
            {
                string responseText = await postPar.Content.ReadAsStringAsync();
                Logger.LogError($"PAR API failed with status code {postPar.StatusCode}: {responseText}");
                throw new Exception($"PAR API failed with status code {postPar.StatusCode}: {responseText}");
            }

            var postCustodian = await HttpClient.PostAsync(
                "https://localhost:7041/api/Custodian",
                new StringContent(custodianDataJson, Encoding.UTF8, "application/json")
            );
            if (!postCustodian.IsSuccessStatusCode)
            {
                Logger.LogError($"Custodian API failed with status code {postCustodian.StatusCode}");
                throw new Exception($"Custodian API failed with status code {postCustodian.StatusCode}");
            }

            if (postPar.IsSuccessStatusCode && postCustodian.IsSuccessStatusCode)
            {
                Logger.LogInformation("Both API calls were successful.");
                await ShowSuccessModal();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SubmitForm.");
            throw;
        }
    }

    private async Task ShowSuccessModal()
    {
        var options = new ModalOptions
            {
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };

        var parameters = new ModalParameters();

        var modal = ModalService.Show<SuccessAddForm>("", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            // Refresh the page when the modal is closed
            NavigationManager.NavigateTo("/addform", forceLoad: true);
        }
    }

    private async Task ShowValidationErrorModal()
    {
        var options = new ModalOptions
            {
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };

        var parameters = new ModalParameters();
        // parameters.Add("Title", "Validation Error");
        // parameters.Add("Message", "Invalid inputs detected. Please fill out all required fields.");

        var modal = ModalService.Show<ErrorAddForm>("Validation Error", parameters, options);
        await modal.Result; // Wait for the modal to close, no page reload needed
    }

    private async Task<string> GenerateCSTCode()
    {
        var random = new Random();
        var existingCSTCodes = await GetExistingCSTCodes();

        while (true)
        {
            var randomCode = $"CST{random.Next(100, 1000)}";
            if (!existingCSTCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingCSTCodes()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Custodian/GetLatest");
        var json = await response.Content.ReadAsStringAsync();
        var existingCSTCodes = JsonConvert.DeserializeObject<List<string>>(json);
        return existingCSTCodes;
    }

    private async Task<string> GenerateParCode()
    {
        var random = new Random();
        var existingParCodes = await GetExistingParCode();

        while (true)
        {
            var randomCode = $"PAR{random.Next(100, 1000)}";
            if (!existingParCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingParCode()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/PAR/GetLatest");
        var json = await response.Content.ReadAsStringAsync();
        var existingParCodes = JsonConvert.DeserializeObject<List<string>>(json);
        return existingParCodes;
    }
}
