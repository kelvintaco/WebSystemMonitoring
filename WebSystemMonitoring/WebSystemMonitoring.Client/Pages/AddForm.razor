@using Radzen.Blazor
@using System.Globalization
@using Newtonsoft.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/addform"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ILogger<AddForm> Logger

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="https://localhost:7041/static/site.js"></script>
<PageTitle>PAR Form</PageTitle>
<RadzenForm id="form">
    <div class="main-row">
        <div class="form-group">
            <RadzenLabel Text="Quantity" />
            <RadzenNumeric @bind-Value="ParQty" Required="true" Min="1" Style="width:70px;" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Unit" />
            <RadzenTextBox @bind-Value="Unit" Style="width:100px;" Placeholder="Enter Unit" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Item:" />
            <RadzenDropDownDataGrid @bind-Value="SelectedItem" Data="ItemList" AllowClear="false" AllowFiltering="true" 
            Placeholder="Select an Item" Required="true" Style="width:200px;" 
            Change="@OnItemSelected" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Details"/>
            <RadzenTextBox Value="@ItemDetails" Required="true" ReadOnly="true" Style="width:250px;" Placeholder="Brand/Specifications/Etc" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Date Acquired" />
            <RadzenDatePicker TValue="DateOnly" @bind-Value="Date" Required="true" DateFormat="yyyy-MM-dd" Style="width:150px;" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Property No." />
            <RadzenTextBox Value="@ItemCode.ToString()" ReadOnly="true" Style="width:100px;" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Unit Value" />
            <RadzenTextBox Value="@value.ToString("C", CultureInfo.CurrentCulture)" ReadOnly="true" Style="width:100px;" />
        </div>
    </div>
    <div style="width: 200px; margin-left: 220px; margin-bottom: 2px;">
        <span @onclick="ShowAddItemModal" style="color: #007bff; cursor: pointer; text-decoration: underline; font-size: 0.95em;">item does not exist?</span>
    </div>
    <div class="form-sections">
        <div class="left-col">
            <RadzenLabel Text="1. Classification" />
            <div>
                <RadzenCheckBox @bind-Value="IsClassification1" Required="true" /> Office Equipment<br />
                <RadzenCheckBox @bind-Value="IsClassification2" Required="true" /> Furniture and Fixtures<br />
                <RadzenCheckBox @bind-Value="IsClassification3" Required="true" /> IT Equipment<br />
                <RadzenCheckBox @bind-Value="IsClassification4" Required="true" /> Other Machinery & Equipment<br />
                <RadzenCheckBox @bind-Value="IsClassification5" Required="true" /> Communication Equipment
            </div>
            <RadzenLabel Text="2. Reference Check #" />
            <RadzenTextBox Value="@referenceNo.ToString()" ReadOnly="true" Style="width:150px;" />
        </div>
        <div class="right-col">
            <RadzenLabel Text="3. Source of Fund" />
            <div>
                <RadzenCheckBox @bind-Value="IsSourceOfFund1" /> GF
                <RadzenCheckBox @bind-Value="IsSourceOfFund2" Style="margin-left:10px;" /> SEF
                <RadzenCheckBox @bind-Value="IsSourceOfFund3" Style="margin-left:10px;" /> Trust Fund
                <RadzenLabel Text="Others" Style="margin-left:10px;" />
                <RadzenTextBox @bind-Value="TrustFundText" Placeholder="Trust Fund details" Style="width:150px; margin-left:10px;" />
            </div>
            <RadzenLabel Text="4. Distribution of Copies" />
            <div>
                <RadzenCheckBox @bind-Value="Copies1" /> Requisition c/o Property Custodian<br />
                <RadzenCheckBox @bind-Value="Copies2" /> GSO<br />
                <RadzenCheckBox @bind-Value="Copies3" /> Accounting Office<br />
                <RadzenCheckBox @bind-Value="Copies4" /> Disbursement Voucher
            </div>
        </div>
    </div>

    <div class="bottom-row">
        <div>
            <RadzenLabel Text="Received By:" />
            <RadzenTextBox @bind-Value="CSTName" />
        </div>
        <div>
            <RadzenLabel Text="Department Head:" />
            <RadzenTextBox @bind-Value="DPRName" />
        </div>
    </div>
    <div class="button-row" style="margin-top: 20px;">
        <input type="submit" value="Submit" @onclick="SubmitForm" disabled="@IsSubmitting" style="margin-top: 20px;" />
        <button type="button" @onclick="CancelForm" disabled="@IsSubmitting" style="margin-left: 10px;">Cancel</button>
    </div>
</RadzenForm>

<CascadingBlazoredModal></CascadingBlazoredModal>
@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    private CancellationTokenSource cts = new CancellationTokenSource();

    public List<string>? ItemList;
    public string? CSTName;
    public string? DPRName;
    public int ParQty;
    public DateOnly Date = DateOnly.FromDateTime(DateTime.Today);
    public string? SelectedItem;
    public int referenceNo;
    public int ItemCode;
    public float value { get; set; }
    public string? Unit { get; set; }
    public bool IsClassification1 { get; set; }
    public bool IsClassification2 { get; set; }
    public bool IsClassification3 { get; set; }
    public bool IsClassification4 { get; set; }
    public bool IsClassification5 { get; set; }
    public bool IsSourceOfFund1 { get; set; }
    public bool IsSourceOfFund2 { get; set; }
    public bool IsSourceOfFund3 { get; set; }
    public string? TrustFundText { get; set; }
    public bool Copies1 { get; set; }
    public bool Copies2 { get; set; }
    public bool Copies3 { get; set; }
    public bool Copies4 { get; set; }
    private bool IsSubmitting { get; set; }
    private string? ItemDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Item/byItemNames");
        if (response.IsSuccessStatusCode)
        {
            ItemList = await response.Content.ReadFromJsonAsync<List<string>>();
        }

        var random = new Random();
        referenceNo = random.Next(100000, 999999);
    }

    private async Task OnItemSelected(object selectedItem)
    {
        if (string.IsNullOrEmpty(SelectedItem)) return;

        try
        {
            // Fetch Item Code
            var itemCodeResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemCode/{SelectedItem}");
            if (itemCodeResponse.IsSuccessStatusCode)
            {
                ItemCode = await itemCodeResponse.Content.ReadFromJsonAsync<int>();
            }
            else
            {
                Unit = "N/A";
            }

            // Fetch Item Value
            var valueResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItem}");
            if (valueResponse.IsSuccessStatusCode)
            {
                value = await valueResponse.Content.ReadFromJsonAsync<float>();
            }

            // Fetch Item Description
            var descResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{SelectedItem}");
            if (descResponse.IsSuccessStatusCode)
            {
                ItemDetails = await descResponse.Content.ReadAsStringAsync();
            }
            else
            {
                ItemDetails = "N/A";
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching item details for {SelectedItem}", SelectedItem);
            await ShowValidationErrorModal();
        }
    }

    private async Task SubmitForm()
    {
        IsSubmitting = true;
        try
        {
            Logger.LogInformation("Starting SubmitForm");

            // Validate fields
            if (string.IsNullOrEmpty(CSTName) || string.IsNullOrEmpty(DPRName) || ParQty <= 0 || 
                Date == default || string.IsNullOrEmpty(SelectedItem) || string.IsNullOrEmpty(Unit) ||
                !(IsClassification1 || IsClassification2 || IsClassification3 || IsClassification4 || IsClassification5) ||
                !(IsSourceOfFund1 || IsSourceOfFund2 || IsSourceOfFund3) ||
                !(Copies1 || Copies2 || Copies3 || Copies4))
            {
                Logger.LogWarning("Form submission failed due to missing or invalid fields.");
                await ShowValidationErrorModal();
                return;
            }

            // Construct common data
            var classifications = new List<string>();
            if (IsClassification1) classifications.Add("Office Equipment");
            if (IsClassification2) classifications.Add("Furniture and Fixtures");
            if (IsClassification3) classifications.Add("IT Equipment");
            if (IsClassification4) classifications.Add("Other Machinery & Equipment");
            if (IsClassification5) classifications.Add("Communication Equipment");
            var classification = string.Join(", ", classifications);

            var funds = new List<string>();
            if (IsSourceOfFund1) funds.Add("GF");
            if (IsSourceOfFund2) funds.Add("SEF");
            if (IsSourceOfFund3) funds.Add($"Trust Fund{(string.IsNullOrEmpty(TrustFundText) ? "" : $": {TrustFundText}")}");
            var fundCls = string.Join(", ", funds);

            var copies = new List<string>();
            if (Copies1) copies.Add("Requisition c/o Property Custodian");
            if (Copies2) copies.Add("GSO");
            if (Copies3) copies.Add("Accounting Office");
            if (Copies4) copies.Add("Disbursement Voucher");
            var sourceCopies = string.Join(", ", copies);

            string? lastParID = null;
            string? pdfBase64 = null;

            // Post a record for each quantity
            for (int i = 0; i < ParQty; i++)
            {
                var formData = new
                {
                    ParID = await GenerateParCode(),
                    ItemCode = ItemCode,
                    ItemName = SelectedItem,
                    ParName = CSTName,
                    DprHeadName = DPRName,
                    ParDate = Date.ToString("yyyy-MM-dd"),
                    Classification = classification,
                    FundCls = fundCls,
                    SourceCopies = sourceCopies,
                    refNo = referenceNo,
                    value = value,
                    ParQty = 1, // Each record represents one unit
                    Unit = Unit,
                    ItemDesc = ItemDetails
                };

                lastParID = formData.ParID; // Store the last ParID

                var formDataJson = JsonConvert.SerializeObject(formData);

                Logger.LogInformation("Posting PAR data for quantity {CurrentQuantity}", i + 1);
                var postPar = await HttpClient.PostAsync(
                    "https://localhost:7041/api/PAR",
                    new StringContent(formDataJson, Encoding.UTF8, "application/json")
                );
                if (!postPar.IsSuccessStatusCode)
                {
                    string responseText = await postPar.Content.ReadAsStringAsync();
                    Logger.LogError($"PAR API failed with status code {postPar.StatusCode}: {responseText}");
                    await ShowValidationErrorModal();
                    return;
                }

                // Generate PDF for the last PAR record
                if (i == ParQty - 1)
                {
                    var parData = new
                    {
                        ParID = formData.ParID,
                        ItemCode = formData.ItemCode,
                        ItemName = formData.ItemName,
                        ParName = formData.ParName,
                        ParDate = DateTime.Parse(formData.ParDate),
                        RefNo = formData.refNo,
                        ParQty = formData.ParQty,
                        IsClassification1 = IsClassification1,
                        IsClassification2 = IsClassification2,
                        IsClassification3 = IsClassification3,
                        IsClassification4 = IsClassification4,
                        IsClassification5 = IsClassification5,
                        FundType = funds.FirstOrDefault() ?? "None",
                        value = formData.value,
                        head = formData.DprHeadName,
                        Copies1 = Copies1,
                        Copies2 = Copies2,
                        Copies3 = Copies3,
                        Copies4 = Copies4,
                        Unit = formData.Unit,
                        ItemDetails = formData.ItemDesc
                    };

                    Logger.LogInformation("Generating PDF for ParID: {ParID}", lastParID);
                    var pdfResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-par", parData);
                    if (pdfResponse.IsSuccessStatusCode)
                    {
                        var fileBytes = await pdfResponse.Content.ReadAsByteArrayAsync();
                        pdfBase64 = Convert.ToBase64String(fileBytes);

                        // Show success modal first
                        var successParameters = new ModalParameters();
                        var successOptions = new ModalOptions
                        {
                            HideCloseButton = true,
                            DisableBackgroundCancel = true
                        };
                        
                        var successModal = ModalService.Show<SuccessAddForm>("Success", successParameters, successOptions);
                        var result = await successModal.Result;

                        // After success modal is closed, show the preview
                        if (!result.Cancelled)
                        {
                            var previewParameters = new ModalParameters();
                            previewParameters.Add("PdfBase64", pdfBase64);
                            var previewOptions = new ModalOptions
                            {
                                HideCloseButton = true,
                                DisableBackgroundCancel = true
                            };
                            ModalService.Show<PARModal>("PAR Document Preview", previewParameters, previewOptions);
                        }
                    }
                    else
                    {
                        var errorContent = await pdfResponse.Content.ReadAsStringAsync();
                        Logger.LogError($"Failed to generate PDF: {pdfResponse.StatusCode} - {errorContent}");
                        await ShowValidationErrorModal();
                        return;
                    }
                }
            }

            // Post Custodian data (only once)
            var custodianData = new
            {
                CSTCode = await GenerateCSTCode(),
                CSTName = CSTName,
                DPRName = DPRName
            };

            var custodianDataJson = JsonConvert.SerializeObject(custodianData);

            Logger.LogInformation("Posting Custodian data");
            var postCustodian = await HttpClient.PostAsync(
                "https://localhost:7041/api/Custodian",
                new StringContent(custodianDataJson, Encoding.UTF8, "application/json")
            );
            if (!postCustodian.IsSuccessStatusCode)
            {
                string responseText = await postCustodian.Content.ReadAsStringAsync();
                Logger.LogError($"Custodian API failed with status code {postCustodian.StatusCode}: {responseText}");
                await ShowValidationErrorModal();
                return;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SubmitForm");
            await ShowValidationErrorModal();
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ShowValidationErrorModal()
    {
        Logger.LogInformation("Showing Validation Error Modal");
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

        var parameters = new ModalParameters();
        await ModalService.Show<ErrorAddForm>("Validation Error", parameters, options).Result;
        Logger.LogInformation("Validation error modal closed");
    }

    private async Task<string> GenerateCSTCode()
    {
        var random = new Random();
        var existingCSTCodes = await GetExistingCSTCodes();

        while (true)
        {
            var randomCode = $"CST{random.Next(100, 1000)}";
            if (!existingCSTCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingCSTCodes()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Custodian/GetLatest");
        var json = await response.Content.ReadAsStringAsync();
        var existingCSTCodes = JsonConvert.DeserializeObject<List<string>>(json);
        return existingCSTCodes ?? new List<string>();
    }

    private async Task<string> GenerateParCode()
    {
        var random = new Random();
        var existingParCodes = await GetExistingParCode();

        while (true)
        {
            var randomCode = $"PAR{random.Next(100, 1000)}";
            if (!existingParCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingParCode()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/PAR/GetLatest");
        var json = await response.Content.ReadAsStringAsync();
        var existingParCodes = JsonConvert.DeserializeObject<List<string>>(json);
        return existingParCodes ?? new List<string>();
    }

    private async Task CancelForm()
    {
        Logger.LogInformation("CancelForm triggered");
        NavigationManager.NavigateTo("/addform", forceLoad: true);
    }

    private async Task ShowAddItemModal()
    {
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        ModalService.Show<AddItem>("Add New Item", options);
    }
    public void Dispose()
    {
        cts.Cancel(); // Cancel any pending operations
        cts.Dispose(); // Dispose the cancellation token source
    }

    // Classes for PAR data
    private class ParData
    {
        public string? ParID { get; set; }
        public int ItemCode { get; set; }
        public string? ItemName { get; set; }
        public string? ParName { get; set; }
        public DateTime ParDate { get; set; }
        public int RefNo { get; set; }
        public int ParQty { get; set; }
        public string? itemunit { get; set; }
        public bool IsClassification1 { get; set; }
        public bool IsClassification2 { get; set; }
        public bool IsClassification3 { get; set; }
        public bool IsClassification4 { get; set; }
        public bool IsClassification5 { get; set; }
        public bool Copies1 { get; set; }
        public bool Copies2 { get; set; }
        public bool Copies3 { get; set; }
        public bool Copies4 { get; set; }
        public string? ItemDetails { get; set; }
        public string? FundType { get; set; }
        public float value { get; set; }
        public string? head { get; set; }
    }
}