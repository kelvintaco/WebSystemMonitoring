@using Radzen.Blazor
@using System.Globalization
@using Newtonsoft.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using Blazored.Modal
@using Blazored.Modal.Services
@inject HttpClient HttpClient
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ILogger<AddForm> Logger

@* Cascading parameter to access ModalInstance *@
<CascadingValue Value="this">
    <CascadingBlazoredModal>
        <RadzenForm id="form">
            <div class="main-row">
                <div class="form-group">
                    <RadzenLabel Text="Quantity" />
                    <RadzenNumeric @bind-Value="ParQty" Required="true" Min="1" Style="width:70px;" />
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Unit" />
                    <RadzenTextBox Value="@Unit" ReadOnly="true" Style="width:100px;" />
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Description" />
                    <RadzenDropDownDataGrid @bind-Value="SelectedItem" Data="ItemList" AllowClear="false" AllowFiltering="true" 
                                            Placeholder="Select an Item" Required="true" Style="width:200px;" 
                                            Change="@OnItemSelected" />
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Date Acquired" />
                    <RadzenDatePicker TValue="DateOnly" @bind-Value="Date" Required="true" DateFormat="yyyy-MM-dd" Style="width:150px;" />
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Property No." />
                    <RadzenTextBox Value="@ItemCode.ToString()" ReadOnly="true" Style="width:100px;" />
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Unit Value" />
                    <RadzenTextBox Value="@value.ToString("C", CultureInfo.CurrentCulture)" ReadOnly="true" Style="width:100px;" />
                </div>
            </div>

            <div class="form-sections">
                <div class="left-col">
                    <RadzenLabel Text="1. Classification" />
                    <div>
                        <RadzenCheckBox @bind-Value="IsClassification1" /> Office Equipment<br />
                        <RadzenCheckBox @bind-Value="IsClassification2" /> Furniture and Fixtures<br />
                        <RadzenCheckBox @bind-Value="IsClassification3" /> IT Equipment<br />
                        <RadzenCheckBox @bind-Value="IsClassification4" /> Other Machinery & Equipment<br />
                        <RadzenCheckBox @bind-Value="IsClassification5" /> Communication Equipment
                    </div>
                    <RadzenLabel Text="2. Reference Check #" />
                    <RadzenTextBox Value="@referenceNo.ToString()" ReadOnly="true" Style="width:150px;" />
                </div>
                <div class="right-col">
                    <RadzenLabel Text="3. Source of Fund" />
                    <div>
                        <RadzenCheckBox @bind-Value="IsSourceOfFund1" /> GF
                        <RadzenCheckBox @bind-Value="IsSourceOfFund2" Style="margin-left:10px;" /> SEF
                        <RadzenCheckBox @bind-Value="IsSourceOfFund3" Style="margin-left:10px;" /> Trust Fund
                        <RadzenTextBox @bind-Value="TrustFundText" Placeholder="Trust Fund details" Style="width:150px; margin-left:10px;" />
                    </div>
                    <RadzenLabel Text="4. Distribution of Copies" />
                    <div>
                        <RadzenCheckBox @bind-Value="Copies1" /> Requisition c/o Property Custodian<br />
                        <RadzenCheckBox @bind-Value="Copies2" /> GSO<br />
                        <RadzenCheckBox @bind-Value="Copies3" /> Accounting Office<br />
                        <RadzenCheckBox @bind-Value="Copies4" /> Disbursement Voucher
                    </div>
                </div>
            </div>

            <div class="bottom-row">
                <div>
                    <RadzenLabel Text="Received By:" />
                    <RadzenTextBox @bind-Value="CSTName" />
                </div>
                <div>
                    <RadzenLabel Text="Department Head:" />
                    <RadzenTextBox @bind-Value="DPRName" />
                </div>
            </div>

            <input type="submit" value="Submit" @onclick="SubmitForm" disabled="@IsSubmitting" style="margin-top: 20px;" />
        </RadzenForm>
    </CascadingBlazoredModal>
</CascadingValue>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } // Access ModalInstance

    public List<string>? ItemList;
    public string? CSTName;
    public string? DPRName;
    public int ParQty;
    public DateOnly Date = DateOnly.FromDateTime(DateTime.Today);
    public string? SelectedItem;
    public int referenceNo;
    public int ItemCode;
    public float value { get; set; }
    public string? Unit { get; set; }
    public bool IsClassification1 { get; set; }
    public bool IsClassification2 { get; set; }
    public bool IsClassification3 { get; set; }
    public bool IsClassification4 { get; set; }
    public bool IsClassification5 { get; set; }
    public bool IsSourceOfFund1 { get; set; }
    public bool IsSourceOfFund2 { get; set; }
    public bool IsSourceOfFund3 { get; set; }
    public string? TrustFundText { get; set; }
    public bool Copies1 { get; set; }
    public bool Copies2 { get; set; }
    public bool Copies3 { get; set; }
    public bool Copies4 { get; set; }
    private bool IsSubmitting { get; set; } // Track submission state

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Item/byItemNames");
        if (response.IsSuccessStatusCode)
        {
            ItemList = await response.Content.ReadFromJsonAsync<List<string>>();
        }

        var random = new Random();
        referenceNo = random.Next(100000, 999999);
    }

    private async Task OnItemSelected(object selectedItem)
    {
        if (string.IsNullOrEmpty(SelectedItem)) return;

        try
        {
            var itemCodeResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemCode/{SelectedItem}");
            if (itemCodeResponse.IsSuccessStatusCode)
            {
                ItemCode = await itemCodeResponse.Content.ReadFromJsonAsync<int>();
                Unit = ItemCode.ToString();
            }
            else
            {
                Unit = "N/A";
            }

            var valueResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItem}");
            if (valueResponse.IsSuccessStatusCode)
            {
                value = await valueResponse.Content.ReadFromJsonAsync<float>();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching item details for {SelectedItem}", SelectedItem);
            await ShowValidationErrorModal();
        }
    }

    private async Task SubmitForm()
    {
        IsSubmitting = true;
        try
        {
            Logger.LogInformation("Starting SubmitForm");

            // Validate fields
            if (string.IsNullOrEmpty(CSTName) || string.IsNullOrEmpty(DPRName) || ParQty <= 0 || 
                Date == default || string.IsNullOrEmpty(SelectedItem) ||
                !(IsClassification1 || IsClassification2 || IsClassification3 || IsClassification4 || IsClassification5) ||
                !(IsSourceOfFund1 || IsSourceOfFund2 || IsSourceOfFund3) ||
                !(Copies1 || Copies2 || Copies3 || Copies4))
            {
                Logger.LogWarning("Form submission failed due to missing or invalid fields.");
                await ShowValidationErrorModal();
                return;
            }

            // Construct data
            var classifications = new List<string>();
            if (IsClassification1) classifications.Add("Office Equipment");
            if (IsClassification2) classifications.Add("Furniture and Fixtures");
            if (IsClassification3) classifications.Add("IT Equipment");
            if (IsClassification4) classifications.Add("Other Machinery & Equipment");
            if (IsClassification5) classifications.Add("Communication Equipment");
            var classification = string.Join(", ", classifications);

            var funds = new List<string>();
            if (IsSourceOfFund1) funds.Add("GF");
            if (IsSourceOfFund2) funds.Add("SEF");
            if (IsSourceOfFund3) funds.Add($"Trust Fund{(string.IsNullOrEmpty(TrustFundText) ? "" : $": {TrustFundText}")}");
            var fundCls = string.Join(", ", funds);

            var copies = new List<string>();
            if (Copies1) copies.Add("Requisition c/o Property Custodian");
            if (Copies2) copies.Add("GSO");
            if (Copies3) copies.Add("Accounting Office");
            if (Copies4) copies.Add("Disbursement Voucher");
            var sourceCopies = string.Join(", ", copies);

            var formData = new
            {
                ParID = await GenerateParCode(),
                ItemCode = ItemCode,
                ItemName = SelectedItem,
                ParName = CSTName,
                DprHeadName = DPRName,
                ParDate = Date.ToString("yyyy-MM-dd"),
                Classification = classification,
                FundCls = fundCls,
                SourceCopies = sourceCopies,
                refNo = referenceNo,
                value = value,
                ParQty = ParQty,
                Unit = Unit
            };

            var custodianData = new
            {
                CSTCode = await GenerateCSTCode(),
                CSTName = CSTName,
                DPRName = DPRName
            };

            var formDataJson = JsonConvert.SerializeObject(formData);
            var custodianDataJson = JsonConvert.SerializeObject(custodianData);

            Logger.LogInformation("Posting PAR data");
            var postPar = await HttpClient.PostAsync(
                "https://localhost:7041/api/PAR",
                new StringContent(formDataJson, Encoding.UTF8, "application/json")
            );
            if (!postPar.IsSuccessStatusCode)
            {
                string responseText = await postPar.Content.ReadAsStringAsync();
                Logger.LogError($"PAR API failed with status code {postPar.StatusCode}: {responseText}");
                await ShowValidationErrorModal();
                return;
            }

            Logger.LogInformation("Posting Custodian data");
            var postCustodian = await HttpClient.PostAsync(
                "https://localhost:7041/api/Custodian",
                new StringContent(custodianDataJson, Encoding.UTF8, "application/json")
            );
            if (!postCustodian.IsSuccessStatusCode)
            {
                string responseText = await postCustodian.Content.ReadAsStringAsync();
                Logger.LogError($"Custodian API failed with status code {postCustodian.StatusCode}: {responseText}");
                await ShowValidationErrorModal();
                return;
            }

            Logger.LogInformation("Both API calls successful, showing success modal");
            await ShowSuccessModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SubmitForm");
            await ShowValidationErrorModal();
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ShowSuccessModal()
    {
        Logger.LogInformation("Showing Success Modal");
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

        var parameters = new ModalParameters();
        var modal = ModalService.Show<SuccessAddForm>("", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            Logger.LogInformation("Success modal closed, closing AddForm modal");

            await ModalInstance.CloseAsync(ModalResult.Ok(true));
            Logger.LogInformation("Navigating to /masterlist");
            NavigationManager.NavigateTo("/masterlist", forceLoad: true);
        }
        else
        {
            Logger.LogInformation("Success modal cancelled");
        }
    }

    private async Task ShowValidationErrorModal()
    {
        Logger.LogInformation("Showing Validation Error Modal");
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

        var parameters = new ModalParameters();
        await ModalService.Show<ErrorAddForm>("Validation Error", parameters, options).Result;
        Logger.LogInformation("Validation error modal closed");
    }

    private async Task<string> GenerateCSTCode()
    {
        var random = new Random();
        var existingCSTCodes = await GetExistingCSTCodes();

        while (true)
        {
            var randomCode = $"CST{random.Next(100, 1000)}";
            if (!existingCSTCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingCSTCodes()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Custodian/GetLatest");
        var json = await response.Content.ReadAsStringAsync();
        var existingCSTCodes = JsonConvert.DeserializeObject<List<string>>(json);
        return existingCSTCodes ?? new List<string>();
    }

    private async Task<string> GenerateParCode()
    {
        var random = new Random();
        var existingParCodes = await GetExistingParCode();

        while (true)
        {
            var randomCode = $"PAR{random.Next(100, 1000)}";
            if (!existingParCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingParCode()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/PAR/GetLatest");
        var json = await response.Content.ReadAsStringAsync();
        var existingParCodes = JsonConvert.DeserializeObject<List<string>>(json);
        return existingParCodes ?? new List<string>();
    }
}