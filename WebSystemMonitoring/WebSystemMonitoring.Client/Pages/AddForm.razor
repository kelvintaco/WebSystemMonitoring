@using Radzen.Blazor
@page "/addform"
@rendermode InteractiveAuto

@inject HttpClient HttpClient

<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">

<h1>Add Transaction</h1>

<RadzenForm id="form">
	<RadzenFieldset>
		<RadzenLabel Text="Recepient Name"/>
		<RadzenTextBox @bind-Value="RecepientName"></RadzenTextBox>
	</RadzenFieldset>
	<RadzenFieldset>
		<RadzenLabel Text="Department" />
		<RadzenTextBox @bind-Value="DprName"></RadzenTextBox>
	</RadzenFieldset>
	<RadzenFieldset>
		<RadzenLabel Text="Quantity" />
		<RadzenNumeric @bind-Value="Quantity"></RadzenNumeric>
	</RadzenFieldset>
	<RadzenFieldset>
		<RadzenLabel Text="Date" />
		<RadzenDatePicker TValue="DateOnly" @bind-Value="Date"/>
	</RadzenFieldset>
	<div name="itemdropdown">
		<RadzenFieldset>
			<RadzenLabel Text="Item" />
			<RadzenDropDownDataGrid @bind-Value="SelectedItem" Data="ItemList" AllowClear="true" AllowFiltering="true" Placeholder="Select an Item" Style="position: absolute;margin-bottom:20px"/>
		</RadzenFieldset>
	</div>

	<RadzenButton Text="Submit" ButtonType="ButtonType.Submit" @onclick="SubmitForm" Style="margin-top: 20px;" />

</RadzenForm>

<script src="_content/Radzen.Blazor/Radzen.Blazor.js">
</script>

@code {
	@inject Radzen.NotificationService notificationService

	public List<string>? ItemList;
	public List<string>? CSTList;
	public string? LatestCSTCode;
	public string? RecepientName;
	public string? DprName;
	public int Quantity;
	public DateOnly Date;
	public string? SelectedItem;
	public int referenceNo;


	protected override async Task OnInitializedAsync()
	{
		var response = await HttpClient.GetAsync("https://localhost:7041/api/Item/byItemNames");
		if (response.IsSuccessStatusCode)
		{
			ItemList = await response.Content.ReadFromJsonAsync<List<string>>();
			//ItemList = JsonConvert.DeserializeObject<List<string>>(json);
		}
		var cstresponse = await HttpClient.GetAsync("https://localhost:7041/api/Custodian/GetLatest");
		if (cstresponse.IsSuccessStatusCode)
		{
			CSTList = await cstresponse.Content.ReadFromJsonAsync<List<string>>();
			LatestCSTCode = CSTList.LastOrDefault();
		}
	}

	private async Task SubmitForm()
	{
		var random = new Random();
		referenceNo = random.Next(100000, 999999);//generation ng ref no

		var formData = new
		{
			RecepientName = RecepientName,
			DprName = DprName,
			Quantity = Quantity,
			Date = Date,
			SelectedItem = SelectedItem,
			ReferenceNo = referenceNo
		};

		var custodianData = new
		{
			CSTCode = GenerateCSTCode(LatestCSTCode),
			RecepientName = RecepientName,
			DprName = DprName
		};

		var postPar = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/PAR", formData);

		var postCustodian = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/Custodian", custodianData);

		if (postPar.IsSuccessStatusCode && postCustodian.IsSuccessStatusCode)
		{
			notificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Success",
					Detail = "Form submitted successfully!",
					Duration = 4000
				});
		}
		else
		{
			notificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "Failed to submit form. Please try again.",
					Duration = 4000
				});
		}
	}

	private string GenerateCSTCode(string latestCSTCode)
	{
		var number = int.Parse(latestCSTCode.Substring(3));
		return $"CST {number.ToString("D3")}";
	}
}
