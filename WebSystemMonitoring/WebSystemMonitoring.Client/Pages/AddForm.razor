@using Radzen.Blazor
@using System.Globalization
@using System.Text
@using System.Text.Json
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/addform"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ILogger<AddForm> Logger

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="https://localhost:7041/static/site.js"></script>

<PageTitle>PAR</PageTitle>

<style>
    .main-row {
        display: flex;
        flex-wrap: nowrap;
        gap: 20px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-sections {
        display: flex;
        gap: 30px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    .left-col, .right-col {
        flex: 1;
        padding: 15px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        background-color: white;
    }

    .bottom-row {
        display: flex;
        gap: 20px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    .bottom-row > div {
        flex: 1;
        padding: 15px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        background-color: white;
    }

    .button-row {
        display: flex;
        justify-content: center;
        gap: 10px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    input[type="submit"], button {
        padding: 8px 20px;
        border: 1px solid #007bff;
        border-radius: 4px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
        transition: background-color 0.2s;
        margin: 20px 0px 0px 0px;
    }

    input[type="submit"]:hover, button:hover {
        background-color: #0056b3;
    }

    input[type="submit"]:disabled, button:disabled {
        background-color: #cccccc;
        border-color: #cccccc;
        cursor: not-allowed;
    }
</style>

<PageTitle>PAR Form</PageTitle>
<h1>Property Acknowledgement Receipt</h1>
<RadzenForm id="form">
    <div class="main-row">
        <div class="form-group">
            <RadzenLabel Text="Quantity" />
            <RadzenNumeric @bind-Value="ParQty" Required="true" Min="1" Max="@currentStock" Style="width:70px;" />
            @if (currentStock > 0)
            {
                <span style="margin-left: 5px; color: #666;">(Available: @currentStock)</span>
            }
        </div>
        <div class="form-group">
            <RadzenLabel Text="Unit" />
            <RadzenTextBox @bind-Value="Unit" Style="width:100px;" Placeholder="Enter Unit" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Item:" />
            <RadzenDropDownDataGrid @bind-Value="SelectedItem" 
                Data="ItemList" 
                TextProperty="DisplayText"
                ValueProperty="ItemName"
                AllowClear="false" 
                AllowFiltering="true" 
                Placeholder="Select an Item" 
                Required="true" 
                Style="width:400px;" 
                Change="@OnItemSelected" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Details"/>
            <RadzenTextBox Value="@(ItemDetails ?? "N/A")" ReadOnly="true" Style="width:250px;" Placeholder="Brand/Specifications/Etc" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Date Acquired" />
            <RadzenDatePicker TValue="DateOnly" @bind-Value="Date" Required="true" DateFormat="yyyy-MM-dd" Style="width:150px;" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Property No." />
            <RadzenTextBox Value="@ItemCode.ToString()" ReadOnly="true" Style="width:100px;" />
        </div>
        <div class="form-group">
            <RadzenLabel Text="Total Value" />
            <RadzenTextBox Value="@_value.ToString("C", new CultureInfo("en-PH"))" ReadOnly="true" Style="width:100px;" />
            <div style="font-size: 0.8em; color: #666; margin-top: 2px;">min 50000</div>
        </div>
    </div>
    
    <div name="itemaddlink" style="margin: 10px 0 20px 0; text-align: center;">
        <span @onclick="ShowAddItemModal" style="color: #007bff; cursor: pointer; text-decoration: underline; font-size: 0.95em;">item does not exist?</span>
    </div>

    <div class="form-sections">
        <div class="left-col">
            <RadzenLabel Text="1. Classification" />
            <div>
                <RadzenCheckBox @bind-Value="IsClassification1" /> Office Equipment<br />
                <RadzenCheckBox @bind-Value="IsClassification2" /> Furniture and Fixtures<br />
                <RadzenCheckBox @bind-Value="IsClassification3" /> IT Equipment<br />
                <RadzenCheckBox @bind-Value="IsClassification4" /> Other Machinery & Equipment<br />
                <RadzenCheckBox @bind-Value="IsClassification5" /> Communication Equipment
            </div>
            <RadzenLabel Text="2. Reference Check #" />
            <RadzenTextBox Value="@referenceNo.ToString()" ReadOnly="true" Style="width:150px;" />
        </div>
        <div class="right-col">
            <RadzenLabel Text="3. Source of Fund" />
            <div>
                <RadzenCheckBox @bind-Value="IsSourceOfFund1" /> GF
                <RadzenCheckBox @bind-Value="IsSourceOfFund2" Style="margin-left:10px;" /> SEF
                <RadzenCheckBox @bind-Value="IsSourceOfFund3" Style="margin-left:10px;" /> Trust Fund
                <RadzenLabel Text="Others" Style="margin-left:10px;" />
                <RadzenTextBox @bind-Value="TrustFundText" Placeholder="Trust Fund details" Style="width:150px; margin-left:10px;" />
            </div>
            <RadzenLabel Text="4. Distribution of Copies" />
            <div>
                <RadzenCheckBox @bind-Value="Copies1" /> Requisition c/o Property Custodian<br />
                <RadzenCheckBox @bind-Value="Copies2" /> GSO<br />
                <RadzenCheckBox @bind-Value="Copies3" /> Accounting Office<br />
                <RadzenCheckBox @bind-Value="Copies4" /> Disbursement Voucher
            </div>
        </div>
    </div>

    <div class="bottom-row">
        <div>
            <RadzenLabel Text="Received By:" />
            <RadzenTextBox @bind-Value="CSTName" />
        </div>
        <div>
            <RadzenLabel Text="Department Head:" />
            <RadzenTextBox @bind-Value="DPRName" />
        </div>
        <div>
            <RadzenLabel Text="Item Location:" />
            <RadzenTextBox @bind-Value="ItemPlace" Required="true" Placeholder="Enter where the item will be placed" />
        </div>
    </div>
    <div class="button-row">
        <input type="submit" value="Submit" @onclick="SubmitForm" disabled="@IsSubmitting" />
        <button type="button" @onclick="CancelForm" disabled="@IsSubmitting">Cancel</button>
    </div>
</RadzenForm>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    [CascadingParameter] public BlazoredModalInstance? ModalInstance { get; set; }
    private CancellationTokenSource cts = new CancellationTokenSource();

    public class ItemDisplayInfo
    {
        public string? ItemName { get; set; }
        public int Stock { get; set; }
        public string? ItemDetails { get; set; }
        public string DisplayText => $"{ItemName} - {ItemDetails} (Stock: {Stock})";
    }

    private List<ItemDisplayInfo>? ItemList;
    private ItemDisplayInfo? SelectedItemInfo;
    private string? SelectedItem;
    private string? CSTName;
    private string? DPRName;
    private int parQty;
    private int ParQty
    {
        get => parQty;
        set
        {
            parQty = value;
            UpdateTotalValue(); 
        }
    }
    private DateOnly Date = DateOnly.FromDateTime(DateTime.Today);
    private int referenceNo;
    private int ItemCode;
    private double _value; 
    private double _unitPrice; 
    private string? Unit;
    private bool IsClassification1;
    private bool IsClassification2;
    private bool IsClassification3;
    private bool IsClassification4;
    private bool IsClassification5;
    private bool IsSourceOfFund1;
    private bool IsSourceOfFund2;
    private bool IsSourceOfFund3;
    private string? TrustFundText;
    private bool Copies1;
    private bool Copies2;
    private bool Copies3;
    private bool Copies4;
    private bool IsSubmitting;
    private string? ItemDetails;
    private string? ItemPlace;
    private int currentStock;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItemList();
        var random = new Random();
        referenceNo = random.Next(100000, 999999);
    }

    private async Task RefreshItemList()
    {
        try
        {
            Logger.LogInformation("Refreshing item list...");
            var response = await HttpClient.GetAsync("https://localhost:7041/api/Item/byItemNamesWithStock");
            if (response.IsSuccessStatusCode)
            {
                ItemList = await response.Content.ReadFromJsonAsync<List<ItemDisplayInfo>>();
                
                if (ItemList != null)
                {
                    foreach (var item in ItemList)
                    {
                        var detailsResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemDescription/{item.ItemName}");
                        item.ItemDetails = detailsResponse.IsSuccessStatusCode 
                            ? await detailsResponse.Content.ReadAsStringAsync() 
                            : "No details available";
                    }
                    Logger.LogInformation($"Retrieved {ItemList.Count} items with stock > 0");
                    Logger.LogInformation($"Items: {string.Join(", ", ItemList.Select(i => i.DisplayText))}");
                }
                else
                {
                    ItemList = new List<ItemDisplayInfo>();
                    Logger.LogWarning("Item list is null after API call");
                }
            }
            else
            {
                ItemList = new List<ItemDisplayInfo>();
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to get items: {response.StatusCode} - {error}");
            }
        }
        catch (Exception ex)
        {
            ItemList = new List<ItemDisplayInfo>();
            Logger.LogError(ex, "Error refreshing item list");
        }
    }

    private async Task OnItemSelected(object value)
    {
        SelectedItem = value as string;
        SelectedItemInfo = ItemList?.FirstOrDefault(i => i.ItemName == SelectedItem);

        if (string.IsNullOrEmpty(SelectedItem) || SelectedItemInfo == null)
        {
            Logger.LogInformation("Item selection cleared");
            ResetItemFields();
            return;
        }

        try
        {
            Logger.LogInformation("Selected item: {ItemName}", SelectedItem);
            currentStock = SelectedItemInfo.Stock;
            if (ParQty > currentStock)
            {
                ParQty = currentStock;
            }
            ItemDetails = SelectedItemInfo.ItemDetails;

            var itemCodeResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemCode/{SelectedItem}");
            if (itemCodeResponse.IsSuccessStatusCode)
            {
                ItemCode = await itemCodeResponse.Content.ReadFromJsonAsync<int>();
            }
            else
            {
                ItemCode = 0;
                Logger.LogWarning("Failed to fetch item code for {ItemName}", SelectedItem);
            }

            var valueResponse = await HttpClient.GetAsync($"https://localhost:7041/api/Item/getItemsPriceByName/{SelectedItemInfo.ItemName}");
            if (valueResponse.IsSuccessStatusCode)
            {
                _unitPrice = await valueResponse.Content.ReadFromJsonAsync<float>();
                _value = ParQty * _unitPrice; 
            }
            else
            {
                _unitPrice = 0;
                _value = 0;
                Logger.LogWarning("Failed to fetch item value for {ItemName}", SelectedItem);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnItemSelected for {ItemName}", SelectedItem);
            await ShowValidationErrorModal();
        }
    }

    private void ResetItemFields()
    {
        SelectedItemInfo = null;
        ItemDetails = null;
        ItemCode = 0;
        _value = 0;
        _unitPrice = 0;
        currentStock = 0;
        ParQty = 0;
        Unit = null;
        StateHasChanged();
    }

    private void UpdateTotalValue()
    {
        _value = ParQty * _unitPrice; 
        StateHasChanged();
    }

    private async Task SubmitForm()
    {
        IsSubmitting = true;
        try
        {
            await RefreshItemList();
            var selectedItemInfo = ItemList?.FirstOrDefault(i => i.ItemName == SelectedItem);
            if (selectedItemInfo == null)
            {
                Logger.LogWarning($"Selected item {SelectedItem} is no longer available");
                await ShowValidationErrorModal();
                return;
            }

            Logger.LogInformation("Starting SubmitForm");

            if (string.IsNullOrEmpty(CSTName) || string.IsNullOrEmpty(DPRName) || ParQty <= 0 || 
                Date == default || string.IsNullOrEmpty(SelectedItem) || string.IsNullOrEmpty(Unit) ||
                string.IsNullOrEmpty(ItemPlace) ||
                !(IsClassification1 || IsClassification2 || IsClassification3 || IsClassification4 || IsClassification5) ||
                !(IsSourceOfFund1 || IsSourceOfFund2 || IsSourceOfFund3) ||
                !(Copies1 || Copies2 || Copies3 || Copies4))
            {
                Logger.LogWarning("Form submission failed due to missing or invalid fields.");
                await ShowValidationErrorModal();
                return;
            }

            if (_value < 50000)
            {
                Logger.LogWarning("Total value must be at least 50,000. Current value: {Value}", _value);
                await ShowValidationErrorModal();
                return;
            }

            if (ParQty > selectedItemInfo.Stock)
            {
                Logger.LogWarning($"Requested quantity ({ParQty}) exceeds available stock ({selectedItemInfo.Stock})");
                await ShowValidationErrorModal();
                return;
            }

            var updateStockResponse = await HttpClient.PutAsJsonAsync(
                $"https://localhost:7041/api/Item/updateStock/{SelectedItem}",
                ParQty
            );
            if (!updateStockResponse.IsSuccessStatusCode)
            {
                string responseText = await updateStockResponse.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to update stock: {updateStockResponse.StatusCode} - {responseText}");
                await ShowValidationErrorModal();
                return;
            }

            var updatePlaceResponse = await HttpClient.PutAsJsonAsync(
                $"https://localhost:7041/api/Item/updatePlace/{SelectedItem}",
                ItemPlace
            );
            if (!updatePlaceResponse.IsSuccessStatusCode)
            {
                string responseText = await updatePlaceResponse.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to update item place: {updatePlaceResponse.StatusCode} - {responseText}");
                await ShowValidationErrorModal();
                return;
            }

            var classifications = new List<string>();
            if (IsClassification1) classifications.Add("Office Equipment");
            if (IsClassification2) classifications.Add("Furniture and Fixtures");
            if (IsClassification3) classifications.Add("IT Equipment");
            if (IsClassification4) classifications.Add("Other Machinery & Equipment");
            if (IsClassification5) classifications.Add("Communication Equipment");
            var classification = string.Join(", ", classifications);

            var funds = new List<string>();
            if (IsSourceOfFund1) funds.Add("GF");
            if (IsSourceOfFund2) funds.Add("SEF");
            if (IsSourceOfFund3) funds.Add($"Trust Fund{(string.IsNullOrEmpty(TrustFundText) ? "" : $": {TrustFundText}")}");
            var fundCls = string.Join(", ", funds);

            var copies = new List<string>();
            if (Copies1) copies.Add("Requisition c/o Property Custodian");
            if (Copies2) copies.Add("GSO");
            if (Copies3) copies.Add("Accounting Office");
            if (Copies4) copies.Add("Disbursement Voucher");
            var sourceCopies = string.Join(", ", copies);

            string? lastParID = null;
            string? pdfBase64 = null;

            for (int i = 0; i < ParQty; i++)
            {
                var formData = new
                {
                    ParID = await GenerateParCode(),
                    ItemCode = ItemCode,
                    ItemName = SelectedItem,
                    ParName = CSTName,
                    DprHeadName = DPRName,
                    ParDate = Date.ToString("yyyy-MM-dd"),
                    Classification = classification,
                    FundCls = fundCls,
                    SourceCopies = sourceCopies,
                    refNo = referenceNo,
                    value = _value,
                    ParQty = ParQty,
                    Unit = Unit,
                    ItemDesc = ItemDetails
                };

                lastParID = formData.ParID;

                var formDataJson = System.Text.Json.JsonSerializer.Serialize(formData);
                Logger.LogInformation("Posting PAR data for quantity {CurrentQuantity}", i + 1);
                var postPar = await HttpClient.PostAsync(
                    "https://localhost:7041/api/PAR",
                    new StringContent(formDataJson, Encoding.UTF8, "application/json")
                );
                if (!postPar.IsSuccessStatusCode)
                {
                    string responseText = await postPar.Content.ReadAsStringAsync();
                    Logger.LogError($"PAR API failed with status code {postPar.StatusCode}: {responseText}");
                    await ShowValidationErrorModal();
                    return;
                }

                if (i == ParQty - 1)
                {
                    var parData = new
                    {
                        ParID = formData.ParID,
                        ItemCode = formData.ItemCode,
                        ItemName = formData.ItemName,
                        ParName = formData.ParName,
                        ParDate = DateTime.Parse(formData.ParDate),
                        RefNo = formData.refNo,
                        ParQty = formData.ParQty,
                        IsClassification1 = IsClassification1,
                        IsClassification2 = IsClassification2,
                        IsClassification3 = IsClassification3,
                        IsClassification4 = IsClassification4,
                        IsClassification5 = IsClassification5,
                        FundType = funds.FirstOrDefault() ?? "None",
                        _value = _value,
                        head = formData.DprHeadName,
                        Copies1 = Copies1,
                        Copies2 = Copies2,
                        Copies3 = Copies3,
                        Copies4 = Copies4,
                        Unit = formData.Unit,
                        ItemDetails = formData.ItemDesc
                    };

                    Logger.LogInformation("Generating PDF for ParID: {ParID}", lastParID);
                    var pdfResponse = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-par", parData);
                    if (pdfResponse.IsSuccessStatusCode)
                    {
                        var fileBytes = await pdfResponse.Content.ReadAsByteArrayAsync();
                        pdfBase64 = Convert.ToBase64String(fileBytes);

                        var successParameters = new ModalParameters();
                        var successOptions = new ModalOptions
                        {
                            HideCloseButton = true,
                            DisableBackgroundCancel = true
                        };
                        
                        var successModal = ModalService.Show<SuccessAddForm>("Success", successParameters, successOptions);
                        var result = await successModal.Result;

                        if (!result.Cancelled)
                        {
                            var previewParameters = new ModalParameters();
                            previewParameters.Add("PdfBase64", pdfBase64);
                            var previewOptions = new ModalOptions
                            {
                                HideCloseButton = true,
                                DisableBackgroundCancel = true
                            };
                            ModalService.Show<PARModal>("PAR Document Preview", previewParameters, previewOptions);
                        }
                    }
                    else
                    {
                        var errorContent = await pdfResponse.Content.ReadAsStringAsync();
                        Logger.LogError($"Failed to generate PDF: {pdfResponse.StatusCode} - {errorContent}");
                        await ShowValidationErrorModal();
                        return;
                    }
                }
            }

            var custodianData = new
            {
                CSTCode = await GenerateCSTCode(),
                CSTName = CSTName,
                DPRName = DPRName
            };

            var custodianDataJson = System.Text.Json.JsonSerializer.Serialize(custodianData);
            Logger.LogInformation("Posting Custodian data");
            var postCustodian = await HttpClient.PostAsync(
                "https://localhost:7041/api/Custodian",
                new StringContent(custodianDataJson, Encoding.UTF8, "application/json")
            );
            if (!postCustodian.IsSuccessStatusCode)
            {
                string responseText = await postCustodian.Content.ReadAsStringAsync();
                Logger.LogError($"Custodian API failed with status code {postCustodian.StatusCode}: {responseText}");
                await ShowValidationErrorModal();
                return;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SubmitForm");
            await ShowValidationErrorModal();
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ShowValidationErrorModal()
    {
        Logger.LogInformation("Showing Validation Error Modal");
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        var parameters = new ModalParameters();
        await ModalService.Show<ErrorAddForm>("Validation Error", parameters, options).Result;
        Logger.LogInformation("Validation error modal closed");
    }

    private async Task<string> GenerateCSTCode()
    {
        var random = new Random();
        var existingCSTCodes = await GetExistingCSTCodes();
        while (true)
        {
            var randomCode = $"CST{random.Next(100, 1000)}";
            if (!existingCSTCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingCSTCodes()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Custodian/GetLatest");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string>();
        }
        return new List<string>();
    }

    private async Task<string> GenerateParCode()
    {
        var random = new Random();
        var existingParCodes = await GetExistingParCode();
        while (true)
        {
            var randomCode = $"PAR{random.Next(100, 1000)}";
            if (!existingParCodes.Contains(randomCode))
            {
                return randomCode;
            }
        }
    }

    private async Task<List<string>> GetExistingParCode()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/PAR/GetLatest");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string>();
        }
        return new List<string>();
    }

    private async Task CancelForm()
    {
        Logger.LogInformation("CancelForm triggered");
        NavigationManager.NavigateTo("/addform", forceLoad: true);
    }

    private async Task ShowAddItemModal()
    {
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        var result = await ModalService.Show<AddItemPAR>("Add New Item", options).Result;
        if (!result.Cancelled)
        {
            await RefreshItemList();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    private class ParData
    {
        public string? ParID { get; set; }
        public int ItemCode { get; set; }
        public string? ItemName { get; set; }
        public string? ParName { get; set; }
        public DateTime ParDate { get; set; }
        public int RefNo { get; set; }
        public int ParQty { get; set; }
        public string? itemunit { get; set; }
        public bool IsClassification1 { get; set; }
        public bool IsClassification2 { get; set; }
        public bool IsClassification3 { get; set; }
        public bool IsClassification4 { get; set; }
        public bool IsClassification5 { get; set; }
        public bool Copies1 { get; set; }
        public bool Copies2 { get; set; }
        public bool Copies3 { get; set; }
        public bool Copies4 { get; set; }
        public string? ItemDetails { get; set; }
        public string? FundType { get; set; }
        public float _value { get; set; }
        public string? head { get; set; }
    }
}