@using Blazored.Modal
@using Blazored.Modal.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<script src="https://localhost:7041/static/site.js"></script>

<BlazoredModalContent>
    <div class="modal-header">
        <h3>ICS Document Preview</h3>
    </div>
    <div class="modal-body">
        @if (isLoading)
        {
            <p>Loading preview...</p>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger">@errorMessage</p>
        }
        else if (!string.IsNullOrEmpty(pdfBase64))
        {
            <div style="width: 100%; height: 500px; overflow: auto;">
                <iframe src="data:application/pdf;base64,@pdfBase64" style="width: 100%; height: 100%; border: none;"></iframe>
            </div>
        }
        else
        {
            <p>No preview available.</p>
        }
    </div>
    <div class="modal-footer">
        @if (!string.IsNullOrEmpty(pdfBase64))
        {
            <button class="btn btn-primary" @onclick="PrintDocument">Print</button>
            <button class="btn btn-secondary" @onclick="DownloadDocument">Download</button>
        }
        <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
    </div>
</BlazoredModalContent>

@code {
    [CascadingParameter] private BlazoredModalInstance ModalInstance { get; set; } = default!;
    [Parameter] public string PdfBase64 { get; set; } = default!;

    private bool isLoading;
    private string? errorMessage;
    private string? pdfBase64;

    protected override void OnInitialized()
    {
        pdfBase64 = PdfBase64;
        if (string.IsNullOrEmpty(pdfBase64))
        {
            errorMessage = "No PDF data provided for preview.";
        }
    }

    private async Task PrintDocument()
    {
        if (!string.IsNullOrEmpty(pdfBase64))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("printPdf", pdfBase64);
                NavigationManager.NavigateTo("/ics", forceLoad: true);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error triggering print: {ex.Message}";
            }
        }
    }

    private async Task DownloadDocument()
    {
        if (!string.IsNullOrEmpty(pdfBase64))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", "ICSData.pdf", pdfBase64, "application/pdf");
				NavigationManager.NavigateTo("/ics", forceLoad: true);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error triggering download: {ex.Message}";
            }
        }
    }

    private async Task CloseModal()
    {
        await ModalInstance.CloseAsync();
        NavigationManager.NavigateTo("/ics", forceLoad: true);
    }
}