@using Radzen.Blazor;
@rendermode InteractiveAuto

@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<h1>ICS</h1>

<RadzenDataGrid class="icsmodal" @ref="grid" Data="@ICSList" TItem="ICS" AllowSorting="true" AllowPaging="true" AllowFiltering="true" PageSize="10">
    <Columns>
        <RadzenDataGridColumn TItem="ICS" Property="ICSID" Title="ICS ID" />
        <RadzenDataGridColumn TItem="ICS" Property="ItemCode" Title="Serial" />
        <RadzenDataGridColumn TItem="ICS" Property="Description" Title="Description" />
        <RadzenDataGridColumn TItem="ICS" Property="CSTCode" Title="Cst Code" />
        <RadzenDataGridColumn TItem="ICS" Property="ICSName" Title="Name" />
        <RadzenDataGridColumn TItem="ICS" Property="ICSPrice" Title="Price" FormatString="₱{0:N2}" />
        <RadzenDataGridColumn TItem="ICS" Property="Life" Title="Life" />
        <RadzenDataGridColumn TItem="ICS" Property="Qty" Title="Qty" />
        <RadzenDataGridColumn TItem="ICS" Property="ICSSDate" Title="IcsDate" />
    </Columns>
</RadzenDataGrid>
<div class="button-row" style="margin-top: 20px;">
    <RadzenButton ButtonType="ButtonType.Button" Text="Close" Click="CloseModal" Variant="Variant.Text" />
</div>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    private RadzenDataGrid<ICS> grid;
    private List<ICS>? ICSList;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var response = await HttpClient.GetAsync("https://localhost:7041/api/ICS");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            ICSList = JsonConvert.DeserializeObject<List<ICS>>(json);
        }
        else
        {
            ICSList = null;
        };
    }
    private async Task CloseModal()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CloseAsync(ModalResult.Cancel());
        }
    }
}

