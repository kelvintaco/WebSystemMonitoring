@using Radzen.Blazor
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json
@using System.Text
@using System.Text.Json
@using System.Globalization
@using Blazored.Modal
@using Blazored.Modal.Services
@page "/additem"
@rendermode InteractiveAuto

@inject HttpClient HttpClient
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ILogger<AddItem> Logger

<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<div class="container mt-4">
    <h3>Add New Item</h3>
    <RadzenForm Submit="@FormSubmit" class="mt-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <RadzenLabel Text="Item Serial" Component="ItemCode" />
                    <RadzenNumeric @bind-Value="ItemCode" Name="ItemCode" Required="true"
                    Style="width: 100%;" placeholder="Enter item serial" Min="1" />
                </div>
                <div class="form-group mb-3">
                    <RadzenLabel Text="Item Name" Component="ItemName" />
                    <RadzenTextBox @bind-Value="ItemName" Name="ItemName" Required="true" 
                    Style="width: 100%;" placeholder="Enter item name" />
                </div>
                <div class="form-group mb-3">
                    <RadzenLabel Text="Details" Component="ItemDeets" />
                    <RadzenTextBox @bind-Value="ItemDeets" Name="ItemDeets" Required="true"
                    Style="width: 100%;" placeholder="Enter item details" />
                </div>
                <div class="form-group mb-3">
                    <RadzenLabel Text="Price" />
                    <RadzenTextBox @bind-Value="priceInput" Name="Price" Required="true" 
                    Style="width: 100%;" placeholder="Enter price" 
                    Change="@OnPriceChange" Pattern="[0-9]*\.?[0-9]*" />
                </div>
                <div class="form-group mb-3">
                    <RadzenLabel Text="Item Stock" Component="Stock" />
                    <RadzenNumeric @bind-Value="Stock" Name="Stock" Required="true"
                    Style="width: 100%;" placeholder="How many stock?" Min="1" />
                </div>
                <div class="form-group mb-3">
                    <RadzenLabel Text="Place" Component="Place" />
                    <RadzenTextBox @bind-Value="Place" Name="Place" Required="true" 
                    Style="width: 100%;" placeholder="Enter place" />
                </div>
                <div class="form-group mb-3">
                    <RadzenLabel Text="Life Time (in years)" Component="LifeTime" />
                    <RadzenNumeric @bind-Value="LifeTime" Name="LifeTime" Required="true" 
                    Style="width: 100%;" placeholder="Enter life time" Min="1" />
                </div>
                <div class="form-group mb-3">
                    <RadzenButton Click="@FormSubmit" Text="Submit" ButtonStyle="ButtonStyle.Primary" 
                    Style="margin-right: 10px;" />
                    <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" 
                    Click="@Cancel" />
                </div>
            </div>
        </div>
    </RadzenForm>
</div>

@code {
    [CascadingParameter] private BlazoredModalInstance ModalInstance { get; set; } = default!;
    private List<string> Item;
    private string priceInput;
    private int ItemCode;
    private string ItemName;
    private double Price;
    private int Stock;
    private string Place;
    private int LifeTime;
    private string ItemDeets;

    private void OnPriceChange(object value)
    {
        if (double.TryParse(value?.ToString(), out double result))
        {
            Price = result;
        }
    }

    private async Task FormSubmit()
    {
        try
        {
            //Logger.LogInformation($"Form values: ItemCode={ItemCode}, ItemName={ItemName}, Price={Price}, Place={Place}, LifeTime={LifeTime}");
            var formData = new Items
            {
                ItemName = ItemName,
                Price = Price,
				Stock = Stock,
                Servicable = true,
                NonServ = false,
                Place = Place,
                LifeTime = LifeTime,
                ItemCode = ItemCode,
                ItemDeets = ItemDeets
            };

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/Item", formData);
            
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Item added successfully.");
                await ShowSuccessModal();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to add item: {error}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in FormSubmit");
            await ShowValidationErrorModal();
        }
    }

    private async Task Cancel()
    {
        try
        {
            await ModalInstance.CloseAsync();
            NavigationManager.NavigateTo("/ics");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during modal cancellation");
        }
    }

    private async Task ShowSuccessModal()
    {
        var options = new ModalOptions
        {
            HideCloseButton = true,
        };

        var parameters = new ModalParameters();
        var modal = ModalService.Show<SuccessAddItem>("", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            NavigationManager.NavigateTo("/ics", forceLoad: true);
        }
    }

    private async Task ShowValidationErrorModal()
    {
        var options = new ModalOptions
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

        var parameters = new ModalParameters();
        var modal = ModalService.Show<ErrorAddItem>("Validation Error", parameters, options);
        await modal.Result;
    }
}