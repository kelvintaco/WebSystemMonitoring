@page "/itemlist"
@rendermode InteractiveAuto

@inject HttpClient HttpClient

<h1>ItemList</h1>

@if (IsLoading)
{
    <div class="spinner-border" role="status">
    </div>
}
else
{ 
    <RadzenDataGrid class="pardatagrid" @ref="grid" Data="@_itemlist" TItem="Items" AllowSorting="true" AllowPaging="true" PageSize="10">
        <Columns>
            <RadzenDataGridColumn TItem="Items" Property="ItemCode" Title="ItemCode" />
            <RadzenDataGridColumn TItem="Items" Property="ItemName" Title="ItemName" />
            <RadzenDataGridColumn TItem="Items" Property="isonBorrow" Title="isonBorrow" />
            <RadzenDataGridColumn TItem="Items" Property="isnotonBorrow" Title="isnotonBorrow" />
            <RadzenDataGridColumn TItem="Items" Property="Servicable" Title="Servicable" />
            <RadzenDataGridColumn TItem="Items" Property="NonServ" Title="NonServ" />
            <RadzenDataGridColumn TItem="Items" Property="Place" Title="Place" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<Items>? _itemlist;
    private bool IsLoading = true;
    private RadzenDataGrid<Items> grid;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        IsLoading = false;
        await InvokeAsync(StateHasChanged);
        var response = await HttpClient.GetAsync("https://localhost:7041/api/Item");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            _itemlist = JsonConvert.DeserializeObject<List<Items>>(json);
        }
        else
        {
            _itemlist = null;
        }
    }
}
