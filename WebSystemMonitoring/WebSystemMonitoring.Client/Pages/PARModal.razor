@using OfficeOpenXml
@using System.IO
@using Radzen.Blazor
@rendermode InteractiveAuto

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>
<script src="https://localhost:7041/static/site.js"></script>

<h1>PAR Details</h1>

<div>
    <h4>Classification</h4>
    <RadzenCheckBox @bind-Value="IsClassification1" Text="Office Equipment" />
    <RadzenCheckBox @bind-Value="IsClassification2" Text="Furniture & Fixtures" />
    <RadzenCheckBox @bind-Value="IsClassification3" Text="IT Equipment" />
    <RadzenCheckBox @bind-Value="IsClassification4" Text="Other Machinery & Equipment" />
    <RadzenCheckBox @bind-Value="IsClassification5" Text="Communication Equipment" />
</div>

<div>
    <h4>Source of Fund</h4>
    <RadzenCheckBox @bind-Value="IsSourceOfFund1" Text="GF" />
    <RadzenCheckBox @bind-Value="IsSourceOfFund2" Text="SEF" />
    <RadzenCheckBox @bind-Value="IsSourceOfFund3" Text="Trust Fund" />
    <RadzenCheckBox @bind-Value="IsSourceOfFund4" Text="Other" />
    @if (IsSourceOfFund4)
    {
        <input type="text" @bind="OtherSourceOfFund" placeholder="Specify other source of fund" />
    }
</div>

<button class="btn btn-primary mt-2" @onclick="SaveToExcel">Save</button>

@code {
    [Parameter] public string SelectedPar { get; set; }

    private PAR SelectedParData;

    private bool IsClassification1;
    private bool IsClassification2;
    private bool IsClassification3;
    private bool IsClassification4;
    private bool IsClassification5;

    private bool IsSourceOfFund1;
    private bool IsSourceOfFund2;
    private bool IsSourceOfFund3;
    private bool IsSourceOfFund4;
    private string OtherSourceOfFund;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(SelectedPar))
        {
            var response = await HttpClient.GetAsync($"https://localhost:7041/api/PAR/byParID/{SelectedPar}");
            if (response.IsSuccessStatusCode)
            {
                SelectedParData = await response.Content.ReadFromJsonAsync<PAR>();
            }
        }
    }

    private async Task SaveToExcel()
    {
        // Prepare data for the server
        var parData = new ParData
            {
                ParID = SelectedParData?.ParID,
                ItemCode = SelectedParData?.ItemCode ?? 0,
                ItemName = SelectedParData?.ItemName,
                ParName = SelectedParData?.ParName,
                ParDate = SelectedParData?.ParDate,
                RefNo = SelectedParData?.refNo ?? 0,
                ParQty = SelectedParData?.ParQty ?? 0,
                IsClassification1 = IsClassification1,
                IsClassification2 = IsClassification2,
                IsClassification3 = IsClassification3,
                IsClassification4 = IsClassification4,
                IsClassification5 = IsClassification5,
                IsSourceOfFund1 = IsSourceOfFund1,
                IsSourceOfFund2 = IsSourceOfFund2,
                IsSourceOfFund3 = IsSourceOfFund3,
                IsSourceOfFund4 = IsSourceOfFund4,
                OtherSourceOfFund = OtherSourceOfFund
            };

        // Call the server API to generate the Excel file
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7041/api/excel/generate-par", parData);
        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            try
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", "PARData.xlsx", Convert.ToBase64String(fileBytes), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                Console.WriteLine("File generated and download triggered successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to trigger download: {ex.Message}");
            }
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to generate Excel file. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}, Content: '{errorContent}'");
        }
    }

    // Data transfer object to match the server
    private class ParData
    {
        public string? ParID { get; set; }
        public int ItemCode { get; set; }
        public string? ItemName { get; set; }
        public string? ParName { get; set; }
        public string? ParDate { get; set; }
        public int RefNo { get; set; }
        public int ParQty { get; set; }
        public bool IsClassification1 { get; set; }
        public bool IsClassification2 { get; set; }
        public bool IsClassification3 { get; set; }
        public bool IsClassification4 { get; set; }
        public bool IsClassification5 { get; set; }
        public bool IsSourceOfFund1 { get; set; }
        public bool IsSourceOfFund2 { get; set; }
        public bool IsSourceOfFund3 { get; set; }
        public bool IsSourceOfFund4 { get; set; }
        public string? OtherSourceOfFund { get; set; }
    }
}