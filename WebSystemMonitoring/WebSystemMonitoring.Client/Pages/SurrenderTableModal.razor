@using Radzen.Blazor;
@rendermode InteractiveAuto

@inject HttpClient HttpClient

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>

<h1>Surrender Table</h1>

<RadzenDataGrid class="surrendermodal" @ref="grid" Data="@SurList" TItem="ArchivedTransactions" AllowSorting="true" AllowPaging="true" AllowFiltering="true" PageSize="10">
    <Columns>
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="archiveID" Title="Archive ID" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="SurName" Title="Name" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="PrpName" Title="Property Name" />
        @* <RadzenDataGridColumn TItem="ArchivedTransactions" Property="DprName" Title="Department Name" /> *@
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="archiveDate" Title="Archive Date" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="Value" Title="Value" FormatString="₱{0:N2}" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="ItemCond" Title="Item Condition" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="SurQTY" Title="Quantity" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="Clasification" Title="Classification" />
        <RadzenDataGridColumn TItem="ArchivedTransactions" Property="Copies" Title="Copies" />
    </Columns>
</RadzenDataGrid>
<div class="button-row" style="margin-top: 20px;">
    <RadzenButton ButtonType="ButtonType.Button" Text="Close" Click="CloseModal" Variant="Variant.Text" />
</div>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    private RadzenDataGrid<ArchivedTransactions> grid;
    private List<ArchivedTransactions>? SurList;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("https://localhost:7041/api/ArchivedTransactions");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            SurList = JsonConvert.DeserializeObject<List<ArchivedTransactions>>(json);
        }
        else
        {
            SurList = null;
        }
    }
    private async Task CloseModal()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CloseAsync(ModalResult.Cancel());
        }
    }
}

